{
#define REDIS_STRING 0
#define REDIS_LIST 1
#define REDIS_SET 2
#define REDIS_ZSET 3
#define REDIS_HASH 4
}

typedef dictType -> typedef dictType: {}

struct aeFileEvent.clientData -> struct aeFileEvent.clientData: {
  if ($base.mask != 0)
    XF_INVOKE(XF_PTR($xform(struct redisClient,struct redisClient)), &$in, &$out);
}

struct aeTimeEvent.clientData -> struct aeTimeEvent.clientData: {
  XF_INVOKE(XF_PTR($xform(struct redisClient,struct redisClient)), &$in, &$out);
}

struct redisObject.ptr -> struct redisObject.ptr: {
  switch($base.type) {
  case REDIS_STRING:
    $out = $in;
    break;
  case REDIS_LIST:
    XF_INVOKE(XF_PTR($xform(typedef list, typedef list, XF_RAW(sizeof(void *)))),
		     &$in, &$out);
    break;
  case REDIS_SET:
    XF_INVOKE(XF_PTR($xform(typedef dict, typedef dict, 
			    XF_RAW(sizeof(void *)), XF_RAW(sizeof(void *)))),
		     &$in, &$out);
    break;
  case REDIS_ZSET:
    $out = $in;
    break;
  case REDIS_HASH:
    $out = $in;
    break;
  }
}

INIT dict.c/dict_force_resize_ratio: {(*local_out)=5;}
