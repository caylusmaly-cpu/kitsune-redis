diff -ur orig/redis-2.0.0/adlist.h redis-2.0.0/adlist.h
--- orig/redis-2.0.0/adlist.h	2011-10-18 14:49:28.000000000 -0400
+++ redis-2.0.0/adlist.h	2012-04-11 18:08:42.918721273 -0400
@@ -33,25 +33,27 @@
 
 /* Node, List, and Iterator are the only data structures used currently. */
 
-typedef struct listNode {
-    struct listNode *prev;
-    struct listNode *next;
-    void *value;
-} listNode;
+struct listNode {
+  struct listNode E_G(@t) *prev; /**DSU xfgen */
+  struct listNode E_G(@t) *next; /**DSU xfgen */
+  void * E_T(@t) value; /**DSU xfgen */
+} E_GENERIC(@t); /**DSU xfgen */
+typedef struct listNode E_G(@t) listNode E_GENERIC(@t); /**DSU xfgen_ignore */
 
 typedef struct listIter {
     listNode *next;
     int direction;
 } listIter;
 
-typedef struct list {
-    listNode *head;
-    listNode *tail;
+struct list {
+  listNode E_G(@t) *head; /**DSU xfgen */
+  listNode E_G(@t) *tail; /**DSU xfgen */
     void *(*dup)(void *ptr);
     void (*free)(void *ptr);
     int (*match)(void *ptr, void *key);
     unsigned int len;
-} list;
+} E_GENERIC(@t); /**DSU xfgen */
+typedef struct list E_G(@t) list E_GENERIC(@t); /**DSU xfgen_ignore */
 
 /* Functions implemented as macros */
 #define listLength(l) ((l)->len)
diff -ur orig/redis-2.0.0/ae.c redis-2.0.0/ae.c
--- orig/redis-2.0.0/ae.c	2011-10-18 14:49:28.000000000 -0400
+++ redis-2.0.0/ae.c	2012-04-12 12:23:01.265316000 -0400
@@ -375,6 +375,7 @@
 void aeMain(aeEventLoop *eventLoop) {
     eventLoop->stop = 0;
     while (!eventLoop->stop) {
+      kitsune_update("main_loop"); /**DSU updatepoint */
         if (eventLoop->beforesleep != NULL)
             eventLoop->beforesleep(eventLoop);
         aeProcessEvents(eventLoop, AE_ALL_EVENTS);
diff -ur orig/redis-2.0.0/ae.h redis-2.0.0/ae.h
--- orig/redis-2.0.0/ae.h	2011-10-18 14:49:28.000000000 -0400
+++ redis-2.0.0/ae.h	2012-04-11 16:16:38.942545588 -0400
@@ -93,7 +93,7 @@
     aeFiredEvent fired[AE_SETSIZE]; /* Fired events */
     aeTimeEvent *timeEventHead;
     int stop;
-    void *apidata; /* This is used for polling API specific data */
+  void * E_OPAQUE apidata; /* This is used for polling API specific data */ /**DSU xfgen */
     aeBeforeSleepProc *beforesleep;
 } aeEventLoop;
 
Only in redis-2.0.0: design-documents
diff -ur orig/redis-2.0.0/dict.h redis-2.0.0/dict.h
--- orig/redis-2.0.0/dict.h	2011-10-18 14:49:28.000000000 -0400
+++ redis-2.0.0/dict.h	2012-04-11 17:38:33.998674007 -0400
@@ -42,11 +42,13 @@
 /* Unused arguments generate annoying warnings... */
 #define DICT_NOTUSED(V) ((void) V)
 
-typedef struct dictEntry {
-    void *key;
-    void *val;
-    struct dictEntry *next;
-} dictEntry;
+struct dictEntry {
+  void * E_T(@k) key; /**DSU xfgen */
+  void * E_T(@v) val; /**DSU xfgen */
+  struct dictEntry E_G(@k, @v) *next; /**DSU xfgen */
+} E_GENERIC(@k, @v); /**DSU xfgen */
+
+typedef struct dictEntry E_G(@k, @v) dictEntry E_GENERIC(@k, @v); /**DSU xfgen_ignore */
 
 typedef struct dictType {
     unsigned int (*hashFunction)(const void *key);
@@ -59,20 +61,22 @@
 
 /* This is our hash table structure. Every dictionary has two of this as we
  * implement incremental rehashing, for the old to the new table. */
-typedef struct dictht {
-    dictEntry **table;
+struct dictht {
+  dictEntry E_G(@k, @v) ** E_PTRARRAY(self.size) table; /**DSU xfgen */ /**DSU xfgen */
     unsigned long size;
     unsigned long sizemask;
     unsigned long used;
-} dictht;
+} E_GENERIC(@k, @v); /**DSU xfgen */
+typedef struct dictht E_G(@k, @v) dictht E_GENERIC(@k, @v); /**DSU xfgen_ignore */
 
-typedef struct dict {
+struct dict {
     dictType *type;
-    void *privdata;
-    dictht ht[2];
+  void * E_OPAQUE privdata; /**DSU xfgen */
+  dictht E_G(@k, @v) ht[2]; /**DSU xfgen */
     int rehashidx; /* rehashing not in progress if rehashidx == -1 */
     int iterators; /* number of iterators currently running */
-} dict;
+} E_GENERIC(@k, @v); /**DSU xfgen */
+typedef struct dict E_G(@k, @v) dict E_GENERIC(@k, @v); /**DSU xfgen_ignore */
 
 typedef struct dictIterator {
     dict *d;
diff -ur orig/redis-2.0.0/doc/BlpopCommand.html redis-2.0.0/doc/BlpopCommand.html
--- orig/redis-2.0.0/doc/BlpopCommand.html	2011-10-18 14:49:28.000000000 -0400
+++ redis-2.0.0/doc/BlpopCommand.html	2011-05-31 16:20:53.000000000 -0400
@@ -16,7 +16,7 @@
             <div id="pagecontent">
                 <div class="index">
 <!-- This is a (PRE) block.  Make sure it's left aligned or your toc title will be off. -->
-<b>BlpopCommand: Contents</b><br>&nbsp;&nbsp;<a href="#BLPOP _key1_ _key2_ ... _keyN_ _timeout_ (Redis &gt;">BLPOP _key1_ _key2_ ... _keyN_ _timeout_ (Redis &gt;</a><br>&nbsp;&nbsp;<a href="#BRPOP _key1_ _key2_ ... _keyN_ _timeout_ (Redis &gt;">BRPOP _key1_ _key2_ ... _keyN_ _timeout_ (Redis &gt;</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Non blocking behavior">Non blocking behavior</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Blocking behavior">Blocking behavior</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Multiple clients blocking for the same keys">Multiple clients blocking for the same keys</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#blocking POP inside a MULTI/EXEC transaction">blocking POP inside a MULTI/EXEC transaction</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Return value">Return value</a>
+<b>BlpopCommand: Contents</b><br>&nbsp;&nbsp;<a href="#BLPOP _key1_ _key2_ ... _keyN_ _timeout_ (Redis &gt;">BLPOP _key1_ _key2_ ... _keyN_ _timeout_ (Redis &gt;</a><br>&nbsp;&nbsp;<a href="#BRPOP _key1_ _key2_ ... _keyN_ _timeout_ (Redis &gt;">BRPOP _key1_ _key2_ ... _keyN_ _timeout_ (Redis &gt;</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Non blocking behavior">Non blocking behavior</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Blocking behavior">Blocking behavior</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Multiple clients blocking for the same keys">Multiple clients blocking for the same keys</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Return value">Return value</a>
                 </div>
                 
                 <h1 class="wikiname">BlpopCommand</h1>
@@ -35,10 +35,8 @@
 <h2><a name="Blocking behavior">Blocking behavior</a></h2><blockquote>If none of the specified keys exist or contain non empty lists, BLPOPblocks until some other client performs a <a href="RpushCommand.html">LPUSH</a> oran <a href="RpushCommand.html">RPUSH</a> operation against one of the lists.</blockquote>
 <blockquote>Once new data is present on one of the lists, the client finally returnswith the name of the key unblocking it and the popped value.</blockquote>
 <blockquote>When blocking, if a non-zero timeout is specified, the client will unblockreturning a nil special value if the specified amount of seconds passedwithout a push operation against at least one of the specified keys.</blockquote>
-<blockquote>The timeout argument is interpreted as an integer value. A timeout of zero means instead to block forever.</blockquote>
+<blockquote>A timeout of zero means instead to block forever.</blockquote>
 <h2><a name="Multiple clients blocking for the same keys">Multiple clients blocking for the same keys</a></h2><blockquote>Multiple clients can block for the same key. They are put intoa queue, so the first to be served will be the one that started to waitearlier, in a first-blpopping first-served fashion.</blockquote>
-<h2><a name="blocking POP inside a MULTI/EXEC transaction">blocking POP inside a MULTI/EXEC transaction</a></h2><blockquote>BLPOP and BRPOP can be used with pipelining (sending multiple commands and reading the replies in batch), but it does not make sense to use BLPOP or BRPOP inside a MULTI/EXEC block (a Redis transaction).</blockquote>
-<blockquote>The behavior of BLPOP inside MULTI/EXEC when the list is empty is to return a multi-bulk nil reply, exactly what  happens when the timeout is reached. If you like science fiction, think at it like if inside MULTI/EXEC the time will  flow at infinite speed :) </blockquote>
 <h2><a name="Return value">Return value</a></h2><blockquote>BLPOP returns a two-elements array via a multi bulk reply in order to returnboth the unblocking key and the popped value.</blockquote>
 <blockquote>When a non-zero timeout is specified, and the BLPOP operation timed out,the return value is a nil multi bulk reply. Most client values will returnfalse or nil accordingly to the programming language used.</blockquote>
 <a href="ReplyTypes.html">Multi bulk reply</a>
diff -ur orig/redis-2.0.0/doc/CommandReference.html redis-2.0.0/doc/CommandReference.html
--- orig/redis-2.0.0/doc/CommandReference.html	2011-10-18 14:49:28.000000000 -0400
+++ redis-2.0.0/doc/CommandReference.html	2011-05-31 16:20:53.000000000 -0400
@@ -16,7 +16,7 @@
             <div id="pagecontent">
                 <div class="index">
 <!-- This is a (PRE) block.  Make sure it's left aligned or your toc title will be off. -->
-<b>CommandReference: Contents</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Categorized Command List">Categorized Command List</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Connection handling">Connection handling</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Commands operating on all value types">Commands operating on all value types</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Commands operating on string values">Commands operating on string values</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Commands operating on lists">Commands operating on lists</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Commands operating on sets">Commands operating on sets</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Commands operating on sorted zsets (sorted sets)">Commands operating on sorted zsets (sorted sets)</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Commands operating on hashes">Commands operating on hashes</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Sorting">Sorting</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Transactions">Transactions</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Publish/Subscribe">Publish/Subscribe</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Persistence control commands">Persistence control commands</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Remote server control commands">Remote server control commands</a>
+<b>CommandReference: Contents</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Connection handling">Connection handling</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Commands operating on all the kind of values">Commands operating on all the kind of values</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Commands operating on string values">Commands operating on string values</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Commands operating on lists">Commands operating on lists</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Commands operating on sets">Commands operating on sets</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Commands operating on sorted sets (zsets, Redis version &gt;">Commands operating on sorted sets (zsets, Redis version &gt;</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Commands operating on hashes">Commands operating on hashes</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Sorting">Sorting</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Transactions">Transactions</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Publish/Subscribe">Publish/Subscribe</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Persistence control commands">Persistence control commands</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Remote server control commands">Remote server control commands</a>
                 </div>
                 
                 <h1 class="wikiname">CommandReference</h1>
@@ -26,18 +26,18 @@
                 </div>
 
                 <div class="narrow">
-                    &iuml;&raquo;&iquest;= Redis Command Reference =<br/><br/>Every command name links to a specific wiki page describing the behavior of the command.<h2><a name="Categorized Command List">Categorized Command List</a></h2><h2><a name="Connection handling">Connection handling</a></h2><table><tr><td style="border: 1px solid #aaa; padding: 5px;"> <b>Command</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Parameters</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Description</b> </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="QuitCommand.html">QUIT</a> </td><td style="border: 1px solid #aaa; padding: 5px;"> - </td><td style="border: 1px solid #aaa; padding: 5px;">  close the connection </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="AuthCommand.html">AUTH</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>password</i> </td><td style="border: 1px solid #aaa; padding: 5px;">  simple password authentication if enabled  </td></tr></table>
-<h2><a name="Commands operating on all value types">Commands operating on all value types</a></h2><table><tr><td style="border: 1px solid #aaa; padding: 5px;"> <b>Command</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Parameters</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Description</b> </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="ExistsCommand.html">EXISTS</a> </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> </td><td style="border: 1px solid #aaa; padding: 5px;">  test if a key exists  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="DelCommand.html">DEL</a> </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> </td><td style="border: 1px solid #aaa; padding: 5px;">  delete a key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="TypeCommand.html">TYPE</a> </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> </td><td style="border: 1px solid #aaa; padding: 5px;">  return the type of the value stored at key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="KeysCommand.html">KEYS</a> </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>pattern</i> </td><td style="border: 1px solid #aaa; padding: 5px;">  return all the keys matching a given pattern  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="RandomkeyCommand.html">RANDOMKEY</a> </td><td style="border: 1px solid #aaa; padding: 5px;"> - </td><td style="border: 1px solid #aaa; padding: 5px;">  return a random key from the key space  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="RenameCommand.html">RENAME</a> </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>oldname</i> <i>newname</i> </td><td style="border: 1px solid #aaa; padding: 5px;">  rename the old key in the new one, destroying the newname key if it already exists  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="RenamenxCommand.html">RENAMENX</a> </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>oldname</i> <i>newname</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  rename the <i>oldname</i> key to <i>newname</i>, if the <i>newname</i> key does not already exist  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="DbsizeCommand.html">DBSIZE</a> </td><td style="border: 1px solid #aaa; padding: 5px;"> - </td><td style="border: 1px solid #aaa; padding: 5px;">  return the number of keys in the current db  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="ExpireCommand.html">EXPIRE</a> </td><td style="border: 1px solid #aaa; padding: 5px;"> - </td><td style="border: 1px solid #aaa; padding: 5px;">  set a time to live in seconds on a key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="ExpireCommand.html">PERSIST</a> </td><td style="border: 1px solid #aaa; padding: 5px;"> - </td><td style="border: 1px solid #aaa; padding: 5px;">  remove the expire from a key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="TtlCommand.html">TTL</a> </td><td style="border: 1px solid #aaa; padding: 5px;"> - </td><td style="border: 1px solid #aaa; padding: 5px;">  get the time to live in seconds of a key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="SelectCommand.html">SELECT</a> </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>index</i> </td><td style="border: 1px solid #aaa; padding: 5px;">  Select the DB with the specified index  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="MoveCommand.html">MOVE</a> </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>dbindex</i> </td><td style="border: 1px solid #aaa; padding: 5px;">  Move the key from the currently selected DB to the <i>dbindex</i> DB   </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="FlushdbCommand.html">FLUSHDB</a> </td><td style="border: 1px solid #aaa; padding: 5px;"> - </td><td style="border: 1px solid #aaa; padding: 5px;">  Remove all the keys from the currently selected DB  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="FlushallCommand.html">FLUSHALL</a></td><td style="border: 1px solid #aaa; padding: 5px;"> - </td><td style="border: 1px solid #aaa; padding: 5px;">  Remove all the keys from all the databases  </td></tr></table>
-<h2><a name="Commands operating on string values">Commands operating on string values</a></h2><table><tr><td style="border: 1px solid #aaa; padding: 5px;"> <b>Command</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Parameters</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Description</b> </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="SetCommand.html">SET</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>value</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Set a <i>key</i> to a string <i>value</i>  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="GetCommand.html">GET</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Return the string value of the <i>key</i>  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="GetsetCommand.html">GETSET</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>value</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Set a key to a string returning the old value of the key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="MgetCommand.html">MGET</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key1</i> <i>key2</i> ... <i>keyN</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Multi-get, return the strings values of the keys  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="SetnxCommand.html">SETNX</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>value</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Set a key to a string value if the key does not exist  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="SetexCommand.html">SETEX</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>time</i> <i>value</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Set+Expire combo command  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="MsetCommand.html">MSET</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key1</i> <i>value1</i> <i>key2</i> <i>value2</i> ... <i>keyN</i> <i>valueN</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Set multiple keys to multiple values in a single atomic operation   </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="MsetCommand.html">MSETNX</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key1</i> <i>value1</i> <i>key2</i> <i>value2</i> ... <i>keyN</i> <i>valueN</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Set multiple keys to multiple values in a single atomic operation if none of the keys already exist  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="IncrCommand.html">INCR</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Increment the integer value of key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="IncrCommand.html">INCRBY</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>integer</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Increment the integer value of <i>key</i> by <i>integer</i>  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="IncrCommand.html">DECR</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Decrement the integer value of key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="IncrCommand.html">DECRBY</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>integer</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Decrement the integer value of <i>key</i> by <i>integer</i>  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="AppendCommand.html">APPEND</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>value</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Append the specified string to the string stored at key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="SubstrCommand.html">SUBSTR</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>start</i> <i>end</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Return a substring of a larger string  </td></tr></table>
-<h2><a name="Commands operating on lists">Commands operating on lists</a></h2><table><tr><td style="border: 1px solid #aaa; padding: 5px;"> <b>Command</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Parameters</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Description</b> </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="RpushCommand.html">RPUSH</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>value</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Append an element to the tail of the List value at key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="RpushCommand.html">LPUSH</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>value</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Append an element to the head of the List value at key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="LlenCommand.html">LLEN</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Return the length of the List value at key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="LrangeCommand.html">LRANGE</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>start</i> <i>end</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Return a range of elements from the List at key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="LtrimCommand.html">LTRIM</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>start</i> <i>end</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Trim the list at key to the specified range of elements  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="LindexCommand.html">LINDEX</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>index</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Return the element at index position from the List at key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="LsetCommand.html">LSET</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>index</i> <i>value</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Set a new value as the element at index position of the List at key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="LremCommand.html">LREM</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>count</i> <i>value</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Remove the first-N, last-N, or all the elements matching value from the List at key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="LpopCommand.html">LPOP</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Return and remove (atomically) the first element of the List at key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="LpopCommand.html">RPOP</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Return and remove (atomically) the last element of the List at key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="BlpopCommand.html">BLPOP</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key1</i> <i>key2</i> ... <i>keyN</i> <i>timeout</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Blocking LPOP  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="BlpopCommand.html">BRPOP</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key1</i> <i>key2</i> ... <i>keyN</i> <i>timeout</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Blocking RPOP  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="RpoplpushCommand.html">RPOPLPUSH</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>srckey</i> <i>dstkey</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Return and remove (atomically) the last element of the source List stored at <i>srckey</i> and push the same element to the destination List stored at <i>dstkey</i>  </td></tr></table>
-<h2><a name="Commands operating on sets">Commands operating on sets</a></h2><table><tr><td style="border: 1px solid #aaa; padding: 5px;"> <b>Command</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Parameters</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Description</b> </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="SaddCommand.html">SADD</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>member</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Add the specified member to the Set value at key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="SremCommand.html">SREM</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>member</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Remove the specified member from the Set value at key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="SpopCommand.html">SPOP</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Remove and return (pop) a random element from the Set value at key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="SmoveCommand.html">SMOVE</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>srckey</i> <i>dstkey</i> <i>member</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Move the specified member from one Set to another atomically  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="ScardCommand.html">SCARD</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Return the number of elements (the cardinality) of the Set at key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="SismemberCommand.html">SISMEMBER</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>member</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Test if the specified value is a member of the Set at key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="SinterCommand.html">SINTER</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key1</i> <i>key2</i> ... <i>keyN</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Return the intersection between the Sets stored at key1, key2, ..., keyN  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="SinterstoreCommand.html">SINTERSTORE</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>dstkey</i> <i>key1</i> <i>key2</i> ... <i>keyN</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Compute the intersection between the Sets stored at key1, key2, ..., keyN, and store the resulting Set at dstkey  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="SunionCommand.html">SUNION</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key1</i> <i>key2</i> ... <i>keyN</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Return the union between the Sets stored at key1, key2, ..., keyN  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="SunionstoreCommand.html">SUNIONSTORE</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>dstkey</i> <i>key1</i> <i>key2</i> ... <i>keyN</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Compute the union between the Sets stored at key1, key2, ..., keyN, and store the resulting Set at dstkey  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="SdiffCommand.html">SDIFF</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key1</i> <i>key2</i> ... <i>keyN</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Return the difference between the Set stored at key1 and all the Sets key2, ..., keyN  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="SdiffstoreCommand.html">SDIFFSTORE</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>dstkey</i> <i>key1</i> <i>key2</i> ... <i>keyN</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Compute the difference between the Set key1 and all the Sets key2, ..., keyN, and store the resulting Set at dstkey  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="SmembersCommand.html">SMEMBERS</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Return all the members of the Set value at key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="SrandmemberCommand.html">SRANDMEMBER</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Return a random member of the Set value at key  </td></tr></table>
-<h2><a name="Commands operating on sorted zsets (sorted sets)">Commands operating on sorted zsets (sorted sets)</a></h2><table><tr><td style="border: 1px solid #aaa; padding: 5px;"> <b>Command</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Parameters</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Description</b> </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="ZaddCommand.html">ZADD</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>score</i> <i>member</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Add the specified member to the Sorted Set value at key or update the score if it already exist  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="ZremCommand.html">ZREM</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>member</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Remove the specified member from the Sorted Set value at key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="ZincrbyCommand.html">ZINCRBY</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>increment</i> <i>member</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  If the member already exists increment its score by <i>increment</i>, otherwise add the member setting <i>increment</i> as score  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="ZrankCommand.html">ZRANK</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>member</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Return the rank (or index) or <i>member</i> in the sorted set at <i>key</i>, with scores being ordered from low to high  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="ZrankCommand.html">ZREVRANK</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>member</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Return the rank (or index) or <i>member</i> in the sorted set at <i>key</i>, with scores being ordered from high to low  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="ZrangeCommand.html">ZRANGE</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>start</i> <i>end</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Return a range of elements from the sorted set at key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="ZrangeCommand.html">ZREVRANGE</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>start</i> <i>end</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Return a range of elements from the sorted set at key, exactly like ZRANGE, but the sorted set is ordered in traversed in reverse order, from the greatest to the smallest score  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="ZrangebyscoreCommand.html">ZRANGEBYSCORE</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>min</i> <i>max</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Return all the elements with score &gt;= min and score &lt;= max (a range query) from the sorted set  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="ZrangebyscoreCommand.html">ZCOUNT</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>min</i> <i>max</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Return the number of elements with score &gt;= min and score &lt;= max in the sorted set  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="ZcardCommand.html">ZCARD</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Return the cardinality (number of elements) of the sorted set at key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="ZscoreCommand.html">ZSCORE</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>element</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Return the score associated with the specified element of the sorted set at key  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="ZremrangebyrankCommand.html">ZREMRANGEBYRANK</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>min</i> <i>max</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Remove all the elements with rank &gt;= min and rank &lt;= max from the sorted set  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="ZremrangebyscoreCommand.html">ZREMRANGEBYSCORE</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>min</i> <i>max</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Remove all the elements with score &gt;= min and score &lt;= max from the sorted set  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="ZunionstoreCommand.html">ZUNIONSTORE / ZINTERSTORE</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>dstkey</i> <i>N</i> <i>key1</i> ... <i>keyN</i> WEIGHTS <i>w1</i> ... <i>wN</i> AGGREGATE SUM|MIN|MAX  </td><td style="border: 1px solid #aaa; padding: 5px;">  Perform a union or intersection over a number of sorted sets with optional weight and aggregate  </td></tr></table>
-<h2><a name="Commands operating on hashes">Commands operating on hashes</a></h2><table><tr><td style="border: 1px solid #aaa; padding: 5px;"> <b>Command</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Parameters</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Description</b> </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="HsetCommand.html">HSET</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>field</i> <i>value</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Set the hash field to the specified value. Creates the hash if needed.  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="HgetCommand.html">HGET</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>field</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Retrieve the value of the specified hash field.  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="HmgetCommand.html">HMGET</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>field1</i> ... <i>fieldN</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Get the hash values associated to the specified fields.  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="HmsetCommand.html">HMSET</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>field1</i> <i>value1</i> ... <i>fieldN</i> <i>valueN</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Set the hash fields to their respective values.  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="HincrbyCommand.html">HINCRBY</a> </td><td style="border: 1px solid #aaa; padding: 5px;">  <i>key</i> <i>field</i> <i>integer</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Increment the integer value of the hash at <i>key</i> on <i>field</i> with <i>integer</i>.  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="HexistsCommand.html">HEXISTS</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>field</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Test for existence of a specified field in a hash  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="HdelCommand.html">HDEL</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> <i>field</i>  </td><td style="border: 1px solid #aaa; padding: 5px;">  Remove the specified field from a hash  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="HlenCommand.html">HLEN</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> </td><td style="border: 1px solid #aaa; padding: 5px;">   Return the number of items in a hash.  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="HgetallCommand.html">HKEYS</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> </td><td style="border: 1px solid #aaa; padding: 5px;">  Return all the fields in a hash.  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="HgetallCommand.html">HVALS</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i>  </td><td style="border: 1px solid #aaa; padding: 5px;"> Return all the values in a hash.  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="HgetallCommand.html">HGETALL</a> </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i>  </td><td style="border: 1px solid #aaa; padding: 5px;"> Return all the fields and associated values in a hash.  </td></tr></table>
-<h2><a name="Sorting">Sorting</a></h2><table><tr><td style="border: 1px solid #aaa; padding: 5px;"> <b>Command</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Parameters</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Description</b> </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="SortCommand.html">SORT</a>  </td><td style="border: 1px solid #aaa; padding: 5px;"> <i>key</i> BY <i>pattern</i> LIMIT <i>start</i> <i>end</i> GET <i>pattern</i> ASC|DESC ALPHA  </td><td style="border: 1px solid #aaa; padding: 5px;">  Sort a Set or a List accordingly to the specified parameters  </td></tr></table>
-<h2><a name="Transactions">Transactions</a></h2><table><tr><td style="border: 1px solid #aaa; padding: 5px;"> <b>Command</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Parameters</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Description</b> </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="MultiExecCommand.html">MULTI/EXEC/DISCARD/WATCH/UNWATCH</a> </td><td style="border: 1px solid #aaa; padding: 5px;"> - </td><td style="border: 1px solid #aaa; padding: 5px;">  Redis atomic transactions  </td></tr></table>
-<h2><a name="Publish/Subscribe">Publish/Subscribe</a></h2><table><tr><td style="border: 1px solid #aaa; padding: 5px;"> <b>Command</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Parameters</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Description</b> </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="PublishSubscribe.html">SUBSCRIBE/UNSUBSCRIBE/PUBLISH</a> </td><td style="border: 1px solid #aaa; padding: 5px;"> -  </td><td style="border: 1px solid #aaa; padding: 5px;">  Redis Public/Subscribe messaging paradigm implementation  </td></tr></table>
-<h2><a name="Persistence control commands">Persistence control commands</a></h2><table><tr><td style="border: 1px solid #aaa; padding: 5px;"> <b>Command</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Parameters</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Description</b> </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="SaveCommand.html">SAVE</a> </td><td style="border: 1px solid #aaa; padding: 5px;"> -  </td><td style="border: 1px solid #aaa; padding: 5px;">  Synchronously save the DB on disk  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="BgsaveCommand.html">BGSAVE</a> </td><td style="border: 1px solid #aaa; padding: 5px;"> -  </td><td style="border: 1px solid #aaa; padding: 5px;">  Asynchronously save the DB on disk  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="LastsaveCommand.html">LASTSAVE</a> </td><td style="border: 1px solid #aaa; padding: 5px;"> -  </td><td style="border: 1px solid #aaa; padding: 5px;">  Return the UNIX time stamp of the last successfully saving of the dataset on disk  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="ShutdownCommand.html">SHUTDOWN</a> </td><td style="border: 1px solid #aaa; padding: 5px;"> -  </td><td style="border: 1px solid #aaa; padding: 5px;">  Synchronously save the DB on disk, then shutdown the server  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="BgrewriteaofCommand.html">BGREWRITEAOF</a> </td><td style="border: 1px solid #aaa; padding: 5px;"> -  </td><td style="border: 1px solid #aaa; padding: 5px;">  Rewrite the append only file in background when it gets too big  </td></tr></table>
-<h2><a name="Remote server control commands">Remote server control commands</a></h2><table><tr><td style="border: 1px solid #aaa; padding: 5px;"> <b>Command</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Parameters</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Description</b> </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="InfoCommand.html">INFO</a> </td><td style="border: 1px solid #aaa; padding: 5px;"> -  </td><td style="border: 1px solid #aaa; padding: 5px;">  Provide information and statistics about the server  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="MonitorCommand.html">MONITOR</a> </td><td style="border: 1px solid #aaa; padding: 5px;"> -  </td><td style="border: 1px solid #aaa; padding: 5px;">  Dump all the received requests in real time  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="SlaveofCommand.html">SLAVEOF</a> </td><td style="border: 1px solid #aaa; padding: 5px;"> -  </td><td style="border: 1px solid #aaa; padding: 5px;">  Change the replication settings  </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> <a href="ConfigCommand.html">CONFIG</a> </td><td style="border: 1px solid #aaa; padding: 5px;"> -  </td><td style="border: 1px solid #aaa; padding: 5px;">  Configure a Redis server at runtime  </td></tr></table>
+                    &iuml;&raquo;&iquest;= Redis Command Reference =<br/><br/>Every command name links to a specific wiki page describing the behavior of the command.<h2><a name="Connection handling">Connection handling</a></h2><ul><li> <a href="QuitCommand.html">QUIT</a> <code name="code" class="python">close the connection</code></li><li> <a href="AuthCommand.html">AUTH</a> <code name="code" class="python">simple password authentication if enabled</code></li></ul>
+<h2><a name="Commands operating on all the kind of values">Commands operating on all the kind of values</a></h2><ul><li> <a href="ExistsCommand.html">EXISTS</a> <i>key</i> <code name="code" class="python">test if a key exists</code></li><li> <a href="DelCommand.html">DEL</a> <i>key</i> <code name="code" class="python">delete a key</code></li><li> <a href="TypeCommand.html">TYPE</a> <i>key</i> <code name="code" class="python">return the type of the value stored at key</code></li><li> <a href="KeysCommand.html">KEYS</a> <i>pattern</i> <code name="code" class="python">return all the keys matching a given pattern</code></li><li> <a href="RandomkeyCommand.html">RANDOMKEY</a> <code name="code" class="python">return a random key from the key space</code></li><li> <a href="RenameCommand.html">RENAME</a> <i>oldname</i> <i>newname</i> <code name="code" class="python">rename the old key in the new one, destroing the newname key if it already exists</code></li><li> <a href="RenamenxCommand.html">RENAMENX</a> <i>oldname</i> <i>newname</i> <code name="code" class="python">rename the old key in the new one, if the newname key does not already exist</code></li><li> <a href="DbsizeCommand.html">DBSIZE</a> <code name="code" class="python">return the number of keys in the current db</code></li><li> <a href="ExpireCommand.html">EXPIRE</a> <code name="code" class="python">set a time to live in seconds on a key</code></li><li> <a href="TtlCommand.html">TTL</a> <code name="code" class="python">get the time to live in seconds of a key</code></li><li> <a href="SelectCommand.html">SELECT</a> <i>index</i> <code name="code" class="python">Select the DB having the specified index</code></li><li> <a href="MoveCommand.html">MOVE</a> <i>key</i> <i>dbindex</i> <code name="code" class="python">Move the key from the currently selected DB to the DB having as index dbindex</code></li><li> <a href="FlushdbCommand.html">FLUSHDB</a> <code name="code" class="python">Remove all the keys of the currently selected DB</code></li><li> <a href="FlushallCommand.html">FLUSHALL</a> <code name="code" class="python">Remove all the keys from all the databases</code></li></ul>
+<h2><a name="Commands operating on string values">Commands operating on string values</a></h2><ul><li> <a href="SetCommand.html">SET</a> <i>key</i> <i>value</i> <code name="code" class="python">set a key to a string value</code></li><li> <a href="GetCommand.html">GET</a> <i>key</i> <code name="code" class="python">return the string value of the key</code></li><li> <a href="GetsetCommand.html">GETSET</a> <i>key</i> <i>value</i> <code name="code" class="python">set a key to a string returning the old value of the key</code></li><li> <a href="MgetCommand.html">MGET</a> <i>key1</i> <i>key2</i> ... <i>keyN</i> <code name="code" class="python">multi-get, return the strings values of the keys</code></li><li> <a href="SetnxCommand.html">SETNX</a> <i>key</i> <i>value</i> <code name="code" class="python">set a key to a string value if the key does not exist</code></li><li> <a href="SetexCommand.html">SETEX</a> <i>key</i> <i>time</i> <i>value</i> <code name="code" class="python">Set+Expire combo command</code></li><li> <a href="MsetCommand.html">MSET</a> <i>key1</i> <i>value1</i> <i>key2</i> <i>value2</i> ... <i>keyN</i> <i>valueN</i> <code name="code" class="python">set a multiple keys to multiple values in a single atomic operation</code></li><li> <a href="MsetCommand.html">MSETNX</a> <i>key1</i> <i>value1</i> <i>key2</i> <i>value2</i> ... <i>keyN</i> <i>valueN</i> <code name="code" class="python">set a multiple keys to multiple values in a single atomic operation if none of the keys already exist</code></li><li> <a href="IncrCommand.html">INCR</a> <i>key</i> <code name="code" class="python">increment the integer value of key</code></li><li> <a href="IncrCommand.html">INCRBY</a> <i>key</i> <i>integer</i><code name="code" class="python"> increment the integer value of key by integer</code></li><li> <a href="IncrCommand.html">DECR</a> <i>key</i> <code name="code" class="python">decrement the integer value of key</code></li><li> <a href="IncrCommand.html">DECRBY</a> <i>key</i> <i>integer</i> <code name="code" class="python">decrement the integer value of key by integer</code></li><li> <a href="AppendCommand.html">APPEND</a> <i>key</i> <i>value</i> <code name="code" class="python">append the specified string to the string stored at key</code></li><li> <a href="SubstrCommand.html">SUBSTR</a> <i>key</i> <i>start</i> <i>end</i> <code name="code" class="python">return a substring out of a larger string</code></li></ul>
+<h2><a name="Commands operating on lists">Commands operating on lists</a></h2><ul><li> <a href="RpushCommand.html">RPUSH</a> <i>key</i> <i>value</i> <code name="code" class="python">Append an element to the tail of the List value at key</code></li><li> <a href="RpushCommand.html">LPUSH</a> <i>key</i> <i>value</i> <code name="code" class="python">Append an element to the head of the List value at key</code></li><li> <a href="LlenCommand.html">LLEN</a> <i>key</i> <code name="code" class="python">Return the length of the List value at key</code></li><li> <a href="LrangeCommand.html">LRANGE</a> <i>key</i> <i>start</i> <i>end</i> <code name="code" class="python">Return a range of elements from the List at key</code></li><li> <a href="LtrimCommand.html">LTRIM</a> <i>key</i> <i>start</i> <i>end</i> <code name="code" class="python">Trim the list at key to the specified range of elements</code></li><li> <a href="LindexCommand.html">LINDEX</a> <i>key</i> <i>index</i> <code name="code" class="python">Return the element at index position from the List at key</code></li><li> <a href="LsetCommand.html">LSET</a> <i>key</i> <i>index</i> <i>value</i> <code name="code" class="python">Set a new value as the element at index position of the List at key</code></li><li> <a href="LremCommand.html">LREM</a> <i>key</i> <i>count</i> <i>value</i> <code name="code" class="python">Remove the first-N, last-N, or all the elements matching value from the List at key</code></li><li> <a href="LpopCommand.html">LPOP</a> <i>key</i> <code name="code" class="python">Return and remove (atomically) the first element of the List at key</code></li><li> <a href="LpopCommand.html">RPOP</a> <i>key</i> <code name="code" class="python">Return and remove (atomically) the last element of the List at key</code></li><li> <a href="BlpopCommand.html">BLPOP</a> <i>key1</i> <i>key2</i> ... <i>keyN</i> <i>timeout</i> <code name="code" class="python">Blocking LPOP</code></li><li> <a href="BlpopCommand.html">BRPOP</a> <i>key1</i> <i>key2</i> ... <i>keyN</i> <i>timeout</i> <code name="code" class="python">Blocking RPOP</code></li><li> <a href="RpoplpushCommand.html">RPOPLPUSH</a> <i>srckey</i> <i>dstkey</i> <code name="code" class="python">Return and remove (atomically) the last element of the source List stored at _srckey_ and push the same element to the destination List stored at _dstkey_</code></li></ul>
+<h2><a name="Commands operating on sets">Commands operating on sets</a></h2><ul><li> <a href="SaddCommand.html">SADD</a> <i>key</i> <i>member</i> <code name="code" class="python">Add the specified member to the Set value at key</code></li><li> <a href="SremCommand.html">SREM</a> <i>key</i> <i>member</i> <code name="code" class="python">Remove the specified member from the Set value at key</code></li><li> <a href="SpopCommand.html">SPOP</a> <i>key</i> <code name="code" class="python">Remove and return (pop) a random element from the Set value at key</code></li><li> <a href="SmoveCommand.html">SMOVE</a> <i>srckey</i> <i>dstkey</i> <i>member</i> <code name="code" class="python">Move the specified member from one Set to another atomically</code></li><li> <a href="ScardCommand.html">SCARD</a> <i>key</i> <code name="code" class="python">Return the number of elements (the cardinality) of the Set at key</code></li><li> <a href="SismemberCommand.html">SISMEMBER</a> <i>key</i> <i>member</i> <code name="code" class="python">Test if the specified value is a member of the Set at key</code></li><li> <a href="SinterCommand.html">SINTER</a> <i>key1</i> <i>key2</i> ... <i>keyN</i> <code name="code" class="python">Return the intersection between the Sets stored at key1, key2, ..., keyN</code></li><li> <a href="SinterstoreCommand.html">SINTERSTORE</a> <i>dstkey</i> <i>key1</i> <i>key2</i> ... <i>keyN</i> <code name="code" class="python">Compute the intersection between the Sets stored at key1, key2, ..., keyN, and store the resulting Set at dstkey</code></li><li> <a href="SunionCommand.html">SUNION</a> <i>key1</i> <i>key2</i> ... <i>keyN</i> <code name="code" class="python">Return the union between the Sets stored at key1, key2, ..., keyN</code></li><li> <a href="SunionstoreCommand.html">SUNIONSTORE</a> <i>dstkey</i> <i>key1</i> <i>key2</i> ... <i>keyN</i> <code name="code" class="python">Compute the union between the Sets stored at key1, key2, ..., keyN, and store the resulting Set at dstkey</code></li><li> <a href="SdiffCommand.html">SDIFF</a> <i>key1</i> <i>key2</i> ... <i>keyN</i> <code name="code" class="python">Return the difference between the Set stored at key1 and all the Sets key2, ..., keyN</code></li><li> <a href="SdiffstoreCommand.html">SDIFFSTORE</a> <i>dstkey</i> <i>key1</i> <i>key2</i> ... <i>keyN</i> <code name="code" class="python">Compute the difference between the Set key1 and all the Sets key2, ..., keyN, and store the resulting Set at dstkey</code></li><li> <a href="SmembersCommand.html">SMEMBERS</a> <i>key</i> <code name="code" class="python">Return all the members of the Set value at key</code></li><li> <a href="SrandmemberCommand.html">SRANDMEMBER</a> <i>key</i> <code name="code" class="python">Return a random member of the Set value at key</code></li></ul>
+<h2><a name="Commands operating on sorted sets (zsets, Redis version &gt;">Commands operating on sorted sets (zsets, Redis version &gt;</a></h2> 1.1) ==<br/><br/><ul><li> <a href="ZaddCommand.html">ZADD</a> <i>key</i> <i>score</i> <i>member</i> <code name="code" class="python">Add the specified member to the Sorted Set value at key or update the score if it already exist</code></li><li> <a href="ZremCommand.html">ZREM</a> <i>key</i> <i>member</i> <code name="code" class="python">Remove the specified member from the Sorted Set value at key</code></li><li> <a href="ZincrbyCommand.html">ZINCRBY</a> <i>key</i> <i>increment</i> <i>member</i> <code name="code" class="python">If the member already exists increment its score by _increment_, otherwise add the member setting _increment_ as score</code></li><li> <a href="ZrankCommand.html">ZRANK</a> <i>key</i> <i>member</i> <code name="code" class="python">Return the rank (or index) or _member_ in the sorted set at _key_, with scores being ordered from low to high</code></li><li> <a href="ZrankCommand.html">ZREVRANK</a> <i>key</i> <i>member</i> <code name="code" class="python">Return the rank (or index) or _member_ in the sorted set at _key_, with scores being ordered from high to low</code></li><li> <a href="ZrangeCommand.html">ZRANGE</a> <i>key</i> <i>start</i> <i>end</i> <code name="code" class="python">Return a range of elements from the sorted set at key</code></li><li> <a href="ZrangeCommand.html">ZREVRANGE</a> <i>key</i> <i>start</i> <i>end</i> <code name="code" class="python">Return a range of elements from the sorted set at key, exactly like ZRANGE, but the sorted set is ordered in traversed in reverse order, from the greatest to the smallest score</code></li><li> <a href="ZrangebyscoreCommand.html">ZRANGEBYSCORE</a> <i>key</i> <i>min</i> <i>max</i> <code name="code" class="python">Return all the elements with score &gt;= min and score &lt;= max (a range query) from the sorted set</code></li><li> <a href="ZcardCommand.html">ZCARD</a> <i>key</i> <code name="code" class="python">Return the cardinality (number of elements) of the sorted set at key</code></li><li> <a href="ZscoreCommand.html">ZSCORE</a> <i>key</i> <i>element</i> <code name="code" class="python">Return the score associated with the specified element of the sorted set at key</code></li><li> <a href="ZremrangebyrankCommand.html">ZREMRANGEBYRANK</a> <i>key</i> <i>min</i> <i>max</i> <code name="code" class="python">Remove all the elements with rank &gt;= min and rank &lt;= max from the sorted set</code></li><li> <a href="ZremrangebyscoreCommand.html">ZREMRANGEBYSCORE</a> <i>key</i> <i>min</i> <i>max</i> <code name="code" class="python">Remove all the elements with score &gt;= min and score &lt;= max from the sorted set</code></li><li> <a href="ZunionstoreCommand.html">ZUNIONSTORE / ZINTERSTORE</a> <i>dstkey</i> <i>N</i> <i>key1</i> ... <i>keyN</i> WEIGHTS <i>w1</i> ... <i>wN</i> AGGREGATE SUM|MIN|MAX <code name="code" class="python">Perform a union or intersection over a number of sorted sets with optional weight and aggregate</code></li></ul>
+<h2><a name="Commands operating on hashes">Commands operating on hashes</a></h2><ul><li> <a href="HsetCommand.html">HSET</a> <i>key</i> <i>field</i> <i>value</i> <code name="code" class="python">Set the hash field to the specified value. Creates the hash if needed.</code></li><li> <a href="HgetCommand.html">HGET</a> <i>key</i> <i>field</i> <code name="code" class="python">Retrieve the value of the specified hash field.</code></li><li> <a href="HmgetCommand.html">HMGET</a> <i>key</i> <i>field1</i> ... <i>fieldN</i> <code name="code" class="python">Get the hash values assoicated to the specified fields.</code></li><li> <a href="HmsetCommand.html">HMSET</a> <i>key</i> <i>field1</i> <i>value1</i> ... <i>fieldN</i> <i>valueN</i> <code name="code" class="python">Set the hash fields to their respective values.</code></li><li> <a href="HincrbyCommand.html">HINCRBY</a> <i>key</i> <i>field</i> <i>integer</i> <code name="code" class="python">Increment the integer value of the hash at _key_ on _field_ with _integer_.</code></li><li> <a href="HexistsCommand.html">HEXISTS</a> <i>key</i> <i>field</i> <code name="code" class="python">Test for existence of a specified field in a hash</code></li><li> <a href="HdelCommand.html">HDEL</a> <i>key</i> <i>field</i> <code name="code" class="python">Remove the specified field from a hash</code></li><li> <a href="HlenCommand.html">HLEN</a> <i>key</i> <code name="code" class="python">Return the number of items in a hash.</code></li><li> <a href="HgetallCommand.html">HKEYS</a> <i>key</i> <code name="code" class="python">Return all the fields in a hash.</code></li><li> <a href="HgetallCommand.html">HVALS</a> <i>key</i> <code name="code" class="python">Return all the values in a hash.</code></li><li> <a href="HgetallCommand.html">HGETALL</a> <i>key</i> <code name="code" class="python">Return all the fields and associated values in a hash.</code></li></ul>
+<h2><a name="Sorting">Sorting</a></h2><ul><li> <a href="SortCommand.html">SORT</a> <i>key</i> BY <i>pattern</i> LIMIT <i>start</i> <i>end</i> GET <i>pattern</i> ASC|DESC ALPHA <code name="code" class="python">Sort a Set or a List accordingly to the specified parameters</code></li></ul>
+<h2><a name="Transactions">Transactions</a></h2><ul><li> <a href="MultiExecCommand.html">MULTI/EXEC/DISCARD/WATCH/UNWATCH</a> <code name="code" class="python">Redis atomic transactions</code></li></ul>
+<h2><a name="Publish/Subscribe">Publish/Subscribe</a></h2><ul><li> <a href="PublishSubscribe.html">SUBSCRIBE/UNSUBSCRIBE/PUBLISH</a> <code name="code" class="python">Redis Public/Subscribe messaging paradigm implementation</code></li></ul>
+<h2><a name="Persistence control commands">Persistence control commands</a></h2><ul><li> <a href="SaveCommand.html">SAVE</a> <code name="code" class="python">Synchronously save the DB on disk</code></li><li> <a href="BgsaveCommand.html">BGSAVE</a> <code name="code" class="python">Asynchronously save the DB on disk</code></li><li> <a href="LastsaveCommand.html">LASTSAVE</a> <code name="code" class="python">Return the UNIX time stamp of the last successfully saving of the dataset on disk</code></li><li> <a href="ShutdownCommand.html">SHUTDOWN</a> <code name="code" class="python">Synchronously save the DB on disk, then shutdown the server</code></li><li> <a href="BgrewriteaofCommand.html">BGREWRITEAOF</a> <code name="code" class="python">Rewrite the append only file in background when it gets too big</code></li></ul>
+<h2><a name="Remote server control commands">Remote server control commands</a></h2><ul><li> <a href="InfoCommand.html">INFO</a> <code name="code" class="python">Provide information and statistics about the server</code></li><li> <a href="MonitorCommand.html">MONITOR</a> <code name="code" class="python">Dump all the received requests in real time</code></li><li> <a href="SlaveofCommand.html">SLAVEOF</a> <code name="code" class="python">Change the replication settings</code></li><li> <a href="ConfigCommand.html">CONFIG</a> <code name="code" class="python">Configure a Redis server at runtime</code></li></ul>
                 </div>
         
             </div>
diff -ur orig/redis-2.0.0/doc/ExpireCommand.html redis-2.0.0/doc/ExpireCommand.html
--- orig/redis-2.0.0/doc/ExpireCommand.html	2011-10-18 14:49:28.000000000 -0400
+++ redis-2.0.0/doc/ExpireCommand.html	2011-05-31 16:20:53.000000000 -0400
@@ -16,7 +16,7 @@
             <div id="pagecontent">
                 <div class="index">
 <!-- This is a (PRE) block.  Make sure it's left aligned or your toc title will be off. -->
-<b>ExpireCommand: Contents</b><br>&nbsp;&nbsp;<a href="#EXPIRE _key_ _seconds_">EXPIRE _key_ _seconds_</a><br>&nbsp;&nbsp;<a href="#EXPIREAT _key_ _unixtime_ (Redis &gt;">EXPIREAT _key_ _unixtime_ (Redis &gt;</a><br>&nbsp;&nbsp;<a href="#PERSIST _key_">PERSIST _key_</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#How the expire is removed from a key">How the expire is removed from a key</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Restrictions with write operations against volatile keys">Restrictions with write operations against volatile keys</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Restrictions for write operations with volatile keys as sources">Restrictions for write operations with volatile keys as sources</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Setting the timeout again on already volatile keys">Setting the timeout again on already volatile keys</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Enhanced Lazy Expiration algorithm">Enhanced Lazy Expiration algorithm</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Version 1.0">Version 1.0</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Version 1.1">Version 1.1</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Return value">Return value</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#FAQ: Can you explain better why Redis &lt; 2.1.3 deletes keys with an EXPIRE on write operations?">FAQ: Can you explain better why Redis &lt; 2.1.3 deletes keys with an EXPIRE on write operations?</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#FAQ: How this limitations were solved in Redis versions &gt; 2.1.3?">FAQ: How this limitations were solved in Redis versions &gt; 2.1.3?</a>
+<b>ExpireCommand: Contents</b><br>&nbsp;&nbsp;<a href="#EXPIRE _key_ _seconds_">EXPIRE _key_ _seconds_</a><br>&nbsp;&nbsp;<a href="#EXPIREAT _key_ _unixtime_ (Redis &gt;">EXPIREAT _key_ _unixtime_ (Redis &gt;</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#How the expire is removed from a key">How the expire is removed from a key</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Restrictions with write operations against volatile keys">Restrictions with write operations against volatile keys</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Restrictions for write operations with volatile keys as sources">Restrictions for write operations with volatile keys as sources</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Setting the timeout again on already volatile keys">Setting the timeout again on already volatile keys</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Enhanced Lazy Expiration algorithm">Enhanced Lazy Expiration algorithm</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Version 1.0">Version 1.0</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Version 1.1">Version 1.1</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Return value">Return value</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#FAQ: Can you explain better why Redis deletes keys with an EXPIRE on write operations?">FAQ: Can you explain better why Redis deletes keys with an EXPIRE on write operations?</a>
                 </div>
                 
                 <h1 class="wikiname">ExpireCommand</h1>
@@ -28,15 +28,12 @@
                 <div class="narrow">
                     &iuml;&raquo;&iquest;#sidebar <a href="GenericCommandsSidebar.html">GenericCommandsSidebar</a><h1><a name="EXPIRE _key_ _seconds_">EXPIRE _key_ _seconds_</a></h1>
 <h1><a name="EXPIREAT _key_ _unixtime_ (Redis &gt;">EXPIREAT _key_ _unixtime_ (Redis &gt;</a></h1> 1.1)=
-<h1><a name="PERSIST _key_">PERSIST _key_</a></h1>
 <i>Time complexity: O(1)</i><blockquote>Set a timeout on the specified key. After the timeout the key will beautomatically delete by the server. A key with an associated timeout issaid to be <i>volatile</i> in Redis terminology.</blockquote>
-<blockquote>Voltile keys are stored on disk like the other keys, the timeout is persistenttoo like all the other aspects of the dataset. Saving a dataset containingexpires and stopping the server does not stop the flow of time as Redisstores on disk the time when the key will no longer be available as Unixtime, and not the remaining seconds.</blockquote>
+<blockquote>Voltile keys are stored on disk like the other keys, the timeout is persistenttoo like all the other aspects of the dataset. Saving a dataset containingthe dataset and stopping the server does not stop the flow of time as Redisregisters on disk when the key will no longer be available as Unix time, andnot the remaining seconds.</blockquote>
 <blockquote>EXPIREAT works exctly like EXPIRE but instead to get the number of secondsrepresenting the Time To Live of the key as a second argument (that is arelative way of specifing the TTL), it takes an absolute one in the form ofa UNIX timestamp (Number of seconds elapsed since 1 Gen 1970).</blockquote>
-<blockquote>EXPIREAT was introduced in order to implement <a href="AppendOnlyFileHowto.html">the Append Only File persistence mode</a>so that EXPIRE commands are automatically translated into EXPIREAT commands for the append only file. Of course EXPIREAT can alsoused by programmers that need a way to simply specify that a given key should expire at a given time in the future.</blockquote>
-<blockquote>Since Redis 2.1.3 you can update the value of the timeout of a key alreadyhaving an expire set. It is also possible to undo the expire at allturning the key into a normal key using the PERSIST command.</blockquote>
-<h2><a name="How the expire is removed from a key">How the expire is removed from a key</a></h2><blockquote>When the key is set to a new value using the SET command, or when a keyis destroied via DEL, the timeout is removed from the key.</blockquote>
-<h2><a name="Restrictions with write operations against volatile keys">Restrictions with write operations against volatile keys</a></h2><blockquote>IMPORTANT: Since Redis 2.1.3 or greater, there are no restrictions aboutthe operations you can perform against volatile keys, however older versionsof Redis, including the current stable version 2.0.0, has the followinglimitations:</blockquote>
-<blockquote>Write operations like LPUSH, LSET and every other command that has theeffect of modifying the value stored at a volatile key have a special semantic:basically a volatile key is destroyed when it is target of a write operation.See for example the following usage pattern:</blockquote>
+<blockquote>EXPIREAT was introduced in order to implement [Persistence append only saving mode] so that EXPIRE commands are automatically translated into EXPIREAT commands for the append only file. Of course EXPIREAT can alsoused by programmers that need a way to simply specify that a given key should expire at a given time in the future.</blockquote>
+<h2><a name="How the expire is removed from a key">How the expire is removed from a key</a></h2><blockquote>When the key is set to a new value using the SET command, the INCR commandor any other command that modify the value stored at key the timeout isremoved from the key and the key becomes non volatile.</blockquote>
+<h2><a name="Restrictions with write operations against volatile keys">Restrictions with write operations against volatile keys</a></h2><blockquote>Write operations like LPUSH, LSET and every other command that has theeffect of modifying the value stored at a volatile key have a special semantic:basically a volatile key is destroyed when it is target of a write operation.See for example the following usage pattern:</blockquote>
 <pre class="codeblock python" name="code">
 % ./redis-cli lpush mylist foobar /Users/antirez/hack/redis
 OK
@@ -64,10 +61,8 @@
 <blockquote>This means that at any given moment the maximum amount of keys alreadyexpired that are using memory is at max equal to max setting operations per second divided by 4.</blockquote>
 <h2><a name="Return value">Return value</a></h2><a href="ReplyTypes.html">Integer reply</a>, specifically:<br/><br/><pre class="codeblock python python" name="code">
 1: the timeout was set.
-0: the timeout was not set since the key already has an associated timeout
-   (this may happen only in Redis versions &lt; 2.1.3, Redis &gt;= 2.1.3 will
-   happily update the timeout), or the key does not exist.
-</pre><h2><a name="FAQ: Can you explain better why Redis &lt; 2.1.3 deletes keys with an EXPIRE on write operations?">FAQ: Can you explain better why Redis &lt; 2.1.3 deletes keys with an EXPIRE on write operations?</a></h2>
+0: the timeout was not set since the key already has an associated timeout, or the key does not exist.
+</pre><h2><a name="FAQ: Can you explain better why Redis deletes keys with an EXPIRE on write operations?">FAQ: Can you explain better why Redis deletes keys with an EXPIRE on write operations?</a></h2>
 Ok let's start with the problem:
 <pre class="codeblock python python python" name="code">
 redis&gt; set a 100
@@ -86,8 +81,7 @@
 INCR a
 </pre>
 Imagine a Redis version that does not implement the &quot;Delete keys with an expire set on write operation&quot; semantic.
-Running the above example with the 10 seconds pause will lead to 'a' being set to the value of 1, as it no longer exists when INCR is called 10 seconds later.<br/><br/>Instead if we drop the 10 seconds pause, the result is that 'a' is set to 101.<br/><br/>And in the practice timing changes! For instance the client may wait 10 seconds before INCR, but the sequence written in the Append Only File (and later replayed-back as fast as possible when Redis is restarted) will not have the pause. Even if we add a timestamp in the AOF, when the time difference is smaller than our timer resolution, we have a race condition.<br/><br/>The same happens with master-slave replication. Again, consider the example above: the client will use the same sequence of commands without the 10 seconds pause, but the replication link will slow down for a few seconds due to a network problem. Result? The master will contain 'a' set to 101, the slave 'a' set to 1.<br/><br/>The only way to avoid this but at the same time have reliable non time dependent timeouts on keys is to destroy volatile keys when a write operation is attempted against it.<br/><br/>After all Redis is one of the rare fully persistent databases that will give you EXPIRE. This comes to a cost :)<h2><a name="FAQ: How this limitations were solved in Redis versions &gt; 2.1.3?">FAQ: How this limitations were solved in Redis versions &gt; 2.1.3?</a></h2>Since Redis 2.1.3 there are no longer restrictions in the use you can do of write commands against volatile keys, still the replication and AOF file are guaranteed to be fully consistent.<br/><br/>In order to obtain a correct behavior without sacrificing consistency now when a key expires, a DEL operation is synthesized in both the AOF file and against all the attached slaves. This way the expiration process is centralized in the master instance, and there is no longer a chance of consistency errors.<br/><br/>However while the slaves while connected to a master will not expire keys independently, they'll still take the full state of the expires existing in the dataset, so when a slave is elected to a master it will be able to expire the keys independently, fully acting as a master.
-
+Running the above example with the 10 seconds pause will lead to 'a' being set to the value of 1, as it no longer exists when INCR is called 10 seconds later.<br/><br/>Instead if we drop the 10 seconds pause, the result is that 'a' is set to 101.<br/><br/>And in the practice timing changes! For instance the client may wait 10 seconds before INCR, but the sequence written in the Append Only File (and later replayed-back as fast as possible when Redis is restarted) will not have the pause. Even if we add a timestamp in the AOF, when the time difference is smaller than our timer resolution, we have a race condition.<br/><br/>The same happens with master-slave replication. Again, consider the example above: the client will use the same sequence of commands without the 10 seconds pause, but the replication link will slow down for a few seconds due to a network problem. Result? The master will contain 'a' set to 101, the slave 'a' set to 1.<br/><br/>The only way to avoid this but at the same time have reliable non time dependent timeouts on keys is to destroy volatile keys when a write operation is attempted against it.<br/><br/>After all Redis is one of the rare fully persistent databases that will give you EXPIRE. This comes to a cost :)
                 </div>
         
             </div>
diff -ur orig/redis-2.0.0/doc/GenericCommandsSidebar.html redis-2.0.0/doc/GenericCommandsSidebar.html
--- orig/redis-2.0.0/doc/GenericCommandsSidebar.html	2011-10-18 14:49:28.000000000 -0400
+++ redis-2.0.0/doc/GenericCommandsSidebar.html	2011-05-31 16:20:53.000000000 -0400
@@ -26,7 +26,7 @@
                 </div>
 
                 <div class="narrow">
-                    &iuml;&raquo;&iquest;== Generic Commands ==<br/><br/><ul><li> <a href="ExistsCommand.html">EXISTS</a></li><li> <a href="DelCommand.html">DEL</a></li><li> <a href="TypeCommand.html">TYPE</a></li><li> <a href="KeysCommand.html">KEYS</a></li><li> <a href="RandomkeyCommand.html">RANDOMKEY</a></li><li> <a href="RenameCommand.html">RENAME</a></li><li> <a href="RenamenxCommand.html">RENAMENX</a></li><li> <a href="DbsizeCommand.html">DBSIZE</a></li><li> <a href="ExpireCommand.html">EXPIRE</a></li><li> <a href="ExpireCommand.html">PERSIST</a></li><li> <a href="TtlCommand.html">TTL</a></li><li> <a href="SelectCommand.html">SELECT</a></li><li> <a href="MoveCommand.html">MOVE</a></li><li> <a href="FlushdbCommand.html">FLUSHDB</a></li><li> <a href="FlushallCommand.html">FLUSHALL</a></li><li> <a href="MultiExecCommand.html">Redis Transactions</a></li></ul>
+                    &iuml;&raquo;&iquest;== Generic Commands ==<br/><br/><ul><li> <a href="ExistsCommand.html">EXISTS</a></li><li> <a href="DelCommand.html">DEL</a></li><li> <a href="TypeCommand.html">TYPE</a></li><li> <a href="KeysCommand.html">KEYS</a></li><li> <a href="RandomkeyCommand.html">RANDOMKEY</a></li><li> <a href="RenameCommand.html">RENAME</a></li><li> <a href="RenamenxCommand.html">RENAMENX</a></li><li> <a href="DbsizeCommand.html">DBSIZE</a></li><li> <a href="ExpireCommand.html">EXPIRE</a></li><li> <a href="TtlCommand.html">TTL</a></li><li> <a href="SelectCommand.html">SELECT</a></li><li> <a href="MoveCommand.html">MOVE</a></li><li> <a href="FlushdbCommand.html">FLUSHDB</a></li><li> <a href="FlushallCommand.html">FLUSHALL</a></li><li> <a href="MultiExecCommand.html">Redis Transactions</a></li></ul>
                 </div>
         
             </div>
Only in orig/redis-2.0.0/doc: HmgetCommand.html
diff -ur orig/redis-2.0.0/doc/index.html redis-2.0.0/doc/index.html
--- orig/redis-2.0.0/doc/index.html	2011-10-18 14:49:28.000000000 -0400
+++ redis-2.0.0/doc/index.html	2011-05-31 16:20:53.000000000 -0400
@@ -26,12 +26,12 @@
                 </div>
 
                 <div class="narrow">
-                    &iuml;&raquo;&iquest;= Redis Documentation =<br/><br/><a href="http://pyha.ru/wiki/index.php?title=Redis:index" target="_blank">Russian Translation</a>Hello! The followings are pointers to different parts of the Redis Documentation.<br/><br/><ul><li> New! You can now <a href="http://try.redis-db.com" target="_blank">Try Redis directly in your browser!</a>.</li><li> <a href="README.html">The README</a> is the best starting point to know more about the project.</li><li> <a href="QuickStart.html">This short Quick Start</a> provides a five minutes step-by-step istructions on how to download, compile, run and test the basic workings of a Redis server.</li><li> <a href="CommandReference.html">The command reference</a> is a description of all the Redis commands with links to command specific pages. You can also download the <a href="http://go2.wordpress.com/?id=725X1342&site=masonoise.wordpress.com&url=http%3A%2F%2Fmasonoise.files.wordpress.com%2F2010%2F03%2Fredis-cheatsheet-v1.pdf" target="_blank">Redis Commands Cheat-Sheet</a> provided by Mason Jones (btw some command may be missing, the primary source is the wiki).</li><li> <a href="TwitterAlikeExample.html">This is a tutorial about creating a Twitter clone using *only* Redis as database, no relational DB at all is used</a>, it is a good start to understand the key-value database paradigm.</li><li> <a href="IntroductionToRedisDataTypes.html">A Fifteen Minutes Introduction to the Redis Data Types</a> explains how Redis data types work and the basic patterns of working with Redis.</li><li> <a href="http://simonwillison.net/static/2010/redis-tutorial/" target="_blank">the Simon Willison Redis Tutorial</a> is a <b>must read</b>, very good documentation where you will find a lot of real world ideas and use cases.</li><li> <a href="Features.html">The features page</a> (currently in draft) is a good start to understand the strength and limitations of Redis.</li><li> <a href="Benchmarks.html">The benchmark page</a> is about the speed performances of Redis.</li><li> <a href="FAQ.html">Our FAQ</a> contains of course some answers to common questions about Redis.</li><li> <a href="http://www.rediscookbook.org/" target="_blank">The Redis Cookbook</a> is a collaborative effort to provide some good recipe ;)</li></ul>
-<h1><a name="HOWTOs about selected features">HOWTOs about selected features</a></h1><ul><li> <a href="ReplicationHowto.html">The Redis Replication HOWTO</a> is what you need to read in order to understand how Redis master <code name="code" class="python">&lt;-&gt;</code> slave replication works.</li><li> <a href="AppendOnlyFileHowto.html">The Append Only File HOWTO</a> explains how the alternative Redis durability mode works. AOF is an alternative to snapshotting on disk from time to time (the default).</li><li> <a href="VirtualMemoryUserGuide.html">Virtual Memory User Guide</a>. A simple to understand guide about using and configuring the Redis Virtual Memory.</li></ul>
+                    &iuml;&raquo;&iquest;= Redis Documentation =<br/><br/><a href="http://pyha.ru/wiki/index.php?title=Redis:index" target="_blank">Russian Translation</a>Hello! The followings are pointers to different parts of the Redis Documentation.<br/><br/><ul><li> New! You can now <a href="http://try.redis-db.com" target="_blank">Try Redis directly in your browser!</a>.</li><li> <a href="README.html">The README</a> is the best starting point to know more about the project.</li><li> <a href="QuickStart.html">This short Quick Start</a> provides a five minutes step-by-step istructions on how to download, compile, run and test the basic workings of a Redis server.</li><li> <a href="CommandReference.html">The command reference</a> is a description of all the Redis commands with links to command specific pages. You can also download the <a href="http://go2.wordpress.com/?id=725X1342&site=masonoise.wordpress.com&url=http%3A%2F%2Fmasonoise.files.wordpress.com%2F2010%2F03%2Fredis-cheatsheet-v1.pdf" target="_blank">Redis Commands Cheat-Sheet</a> provided by Mason Jones (btw some command may be missing, the primary source is the wiki).</li><li> <a href="TwitterAlikeExample.html">This is a tuturial about creating a Twitter clone using *only* Redis as database, no relational DB at all is used</a>, it is a good start to understand the key-value database paradigm.</li><li> <a href="IntroductionToRedisDataTypes.html">A Fifteen Minutes Introduction to the Redis Data Types</a> explains how Redis data types work and the basic patterns of working with Redis.</li><li> <a href="http://simonwillison.net/static/2010/redis-tutorial/" target="_blank">the Simon Willison Redis Tutorial</a> is a <b>must read</b>, very good documentation where you will find a lot of real world ideas and use cases.</li><li> <a href="Features.html">The features page</a> (currently in draft) is a good start to understand the strength and limitations of Redis.</li><li> <a href="Benchmarks.html">The benchmark page</a> is about the speed performances of Redis.</li><li> <a href="FAQ.html">Our FAQ</a> contains of course some answers to common questions about Redis.</li><li> <a href="http://www.rediscookbook.org/" target="_blank">The Redis Cookbook</a> is a collaborative effort to provide some good recipe ;)</li></ul>
+<h1><a name="HOWTOs about selected features">HOWTOs about selected features</a></h1><ul><li> <a href="ReplicationHowto.html">The Redis Replication HOWTO</a> is what you need to read in order to understand how Redis master <code name="code" class="python">&lt;-&gt;</code> slave replication works.</li><li> <a href="AppendOnlyFileHowto.html">The Append Only File HOWTO</a> explains how the alternative Redis durability mode works. AOF is an alternative to snapshotting on disk from time to time (the default).</li><li> <a href="VirtualMemoryUserGuide.html">Virutal Memory User Guide</a>. A simple to understand guide about using and configuring the Redis Virtual Memory.</li></ul>
 <h1><a name="Hacking">Hacking</a></h1>
 <ul><li> <a href="ProtocolSpecification.html">The Protocol Specification</a> is all you need in order to implement a Redis client library for a missing language. PHP, Python, Ruby and Erlang are already supported.</li></ul>
 <ul><li> Look at <a href="RedisInternals.html">Redis Internals</a> if you are interested in the implementation details of the Redis server.</li></ul>
-<h1><a name="Videos">Videos</a></h1><ul><li> <a href="http://mwrc2009.confreaks.com/13-mar-2009-19-24-redis-key-value-nirvana-ezra-zygmuntowicz.html" target="_blank">watch the Ezra Zygmuntowicz talk about Redis</a> to know the most important Redis ideas in few minutes.</li><li> <a href="http://www.ustream.tv/recorded/7855635" target="_blank">Salvatore Sanfilippo and Pieter Noordhuis at the SF Redis Meetup</a></li></ul>
+<h1><a name="Videos">Videos</a></h1><ul><li> <a href="http://mwrc2009.confreaks.com/13-mar-2009-19-24-redis-key-value-nirvana-ezra-zygmuntowicz.html" target="_blank">watch the Ezra Zygmuntowicz talk about Redis</a> to know the most important Redis ideas in few minutes.</li></ul>
                 </div>
         
             </div>
diff -ur orig/redis-2.0.0/doc/MultiExecCommand.html redis-2.0.0/doc/MultiExecCommand.html
--- orig/redis-2.0.0/doc/MultiExecCommand.html	2011-10-18 14:49:28.000000000 -0400
+++ redis-2.0.0/doc/MultiExecCommand.html	2011-05-31 16:20:53.000000000 -0400
@@ -116,7 +116,7 @@
 there will be a race condition. For instance client A and B will read the
 old value, for instance, 10. The value will be incremented to 11 by both
 the clients, and finally SET as the value of the key. So the final value
-will be &quot;11&quot; instead of &quot;12&quot;.<br/><br/>Thanks to WATCH we are able to model the problem very well:
+will be &quot;11&quot; instead of &quot;12&quot;.<br/><br/>Thanks to WATCH we area able to model the problem very well:
 <pre class="codeblock python python python python python python" name="code">
 WATCH mykey
 val = GET mykey
@@ -133,9 +133,9 @@
 clients accessing a much bigger number of keys, so it's very unlikely that
 there are collisions: usually operations don't need to be performed
 multiple times.<h2><a name="WATCH explained">WATCH explained</a></h2>So what is WATCH really about? It is a command that will make the EXEC
-conditional: we are asking Redis to perform the transaction only if no
-other client modified any of the WATCHed keys. Otherwise the transaction is not
-entered at all. (Note that if you WATCH a volatile key and Redis expires the key after you WATCHed it, EXEC will still work. <a href="http://code.google.com/p/redis/issues/detail?id=270" target="_blank">More</a>.)<br/><br/>WATCH can be called multiple times. Simply all the WATCH calls will
+conditional: we are asking Redis to perform the transaction only if all
+the values WATCHed are still the same. Otherwise the transaction is not
+entered at all.<br/><br/>WATCH can be called multiple times. Simply all the WATCH calls will
 have the effects to watch for changes starting from the call, up to the
 moment EXEC is called.<br/><br/>When EXEC is called, either if it will fail or succeed, all keys are
 UNWATCHed. Also when a client connection is closed, everything gets
Only in orig/redis-2.0.0/doc: NonexistentCommands.html
diff -ur orig/redis-2.0.0/doc/README.html redis-2.0.0/doc/README.html
--- orig/redis-2.0.0/doc/README.html	2011-10-18 14:49:28.000000000 -0400
+++ redis-2.0.0/doc/README.html	2011-05-31 16:20:53.000000000 -0400
@@ -26,42 +26,11 @@
                 </div>
 
                 <div class="narrow">
-                    &iuml;&raquo;&iquest;= Introduction =<br/><br/>Redis is an extremely fast and powerful key-value store database and server implemented in ANSI C.  Redis offers many different ways to do one straightforward thing: store a value (&quot;antirez&quot;) to a key (&quot;redis&quot;).  While the format of keys must always be simple strings, the power is with the values, which support the following data types:<br/><br/><ul><li> <a href="Strings.html">Strings</a></li><li> <a href="Lists.html">Lists</a></li><li> <a href="Sets.html">Sets</a></li><li> <a href="SortedSets.html">Sorted Sets (zsets)</a></li><li> <a href="Hashes.html">Hashes</a></li></ul>
-Each value type has an associated list of commands which can operate on them, and the <a href="CommandReference.html">The Redis Command Reference</a> contains an up to date list of these commands, organized primarily by data type.  The Redis source also includes a <a href="RedisCLI.html">Redis command line interface</a> which allows you to interact directly with the server, and is the means by which this introduction will provide examples.  Once you walk through the <a href="QuickStart.html">Redis Quick Start Guide</a> to get your instance of Redis running, you can follow along.  <br/><br/>One of the most powerful aspects of Redis is the wide range of commands which are optimized to work with specific data value types and executed as atomic server-side operations.  The <a href="Lists.html">List</a> type is a great example - Redis implements O(1) operations such as <a href="RpushCommand.html">LPUSH</a> or <a href="RpushCommand.html">RPUSH</a>, which have accompanying <a href="LpopCommand.html">LPOP</a> and <a href="LpopCommand.html">RPOP</a> methods:<br/><br/><pre class="codeblock python" name="code">
-redis&gt; lpush programming_languages C
-OK
-redis&gt; lpush programming_languages Ruby
-OK
-redis&gt; rpush programming_languages Python
-OK
-redis&gt; rpop programming_languages
-Python
-redis&gt; lpop programming_languages
-Ruby
-</pre>More complex operations are available for each data type as well.  Continuing with lists, you can get a range of elements with <a href="LrangeCommand.html">LRANGE</a> (O(start+n)) or trim the list with <a href="LtrimCommand.html">LTRIM</a> (O(n)):<br/><br/><pre class="codeblock python python" name="code">
-redis&gt; lpush cities NYC
-OK
-redis&gt; lpush cities SF
-OK
-redis&gt; lpush cities Tokyo
-OK
-redis&gt; lpush cities London
-OK
-redis&gt; lpush cities Paris
-OK
-redis&gt; lrange cities 0 2
-1. Paris
-2. London
-3. Tokyo
-redis&gt; ltrim cities 0 1
-OK
-redis&gt; lpop cities
-Paris
-redis&gt; lpop cities
-London
-redis&gt; lpop cities
-(nil)
-</pre>You can also add and remove elements from a set, and perform intersections, unions, and differences. <br/><br/>Redis can also be looked at as a data structures server. A Redis user is virtually provided with an interface to  <a href="http://en.wikipedia.org/wiki/Abstract_data_type" target="_blank">Abstract Data Types</a>, saving them from the responsibility of implementing concrete data structures and algorithms -- indeed both algorithms and data structures in Redis are properly chosen in order to obtain the best performance.<h1><a name="All data in memory, but saved on disk">All data in memory, but saved on disk</a></h1>Redis loads and mantains the whole dataset into memory, but the dataset is persistent, since at the same time it is saved on disk, so that when the server is restarted data can be loaded back in memory.<br/><br/>There are two kinds of persistence supported: the first one is called snapshotting. In this mode Redis periodically writes to disk asynchronously. The dataset is loaded from the dump every time the server is (re)started.<br/><br/>Redis can be configured to save the dataset when a certain number of changes is reached and after a given number of seconds elapses. For example, you can configure Redis to save after 1000 changes and at most 60 seconds since the last save. You can specify any combination for these numbers.<br/><br/>Because data is written asynchronously, when a system crash occurs, the last few queries can get lost (that is acceptable in many applications but not in all).  In order to make this a non issue Redis supports another, safer persistence mode, called <a href="AppendOnlyFileHowto.html">Append Only File</a>, where every command received altering the dataset (so not a read-only command, but a write command) is written on an append only file ASAP. This commands are <i>replayed</i> when the server is restarted in order to rebuild the dataset in memory.<br/><br/>Redis Append Only File supports a very handy feature: the server is able to safely rebuild the append only file in background in a non-blocking fashion when it gets too long. You can find <a href="AppendOnlyFileHowto.html">more details in the Append Only File HOWTO</a>.<h1><a name="Master-Slave replication made trivial">Master-Slave replication made trivial</a></h1>Whatever will be the persistence mode you'll use Redis supports master-slave replications if you want to stay really safe or if you need to scale to huge amounts of reads.<br/><br/><b>Redis Replication is trivial to setup</b>. So trivial that all you need to do in order to configure a Redis server to be a slave of another one, with automatic synchronization if the link will go down and so forth, is the following config line: <code name="code" class="python">slaveof 192.168.1.100 6379</code>. <a href="ReplicationHowto.html">We provide a Replication Howto</a> if you want to know more about this feature.<h1><a name="It's persistent but supports expires">It's persistent but supports expires</a></h1>Redis can be used as a <b>memcached on steroids</b> because is as fast as memcached but with a number of features more. Like memcached, Redis also supports setting timeouts to keys so that this key will be automatically removed when a given amount of time passes.<h1><a name="Beyond key-value databases">Beyond key-value databases</a></h1>All these features allow to use Redis as the sole DB for your scalable application without the need of any relational database. <a href="TwitterAlikeExample.html">We wrote a simple Twitter clone in PHP + Redis</a> to show a real world example, the link points to an article explaining the design and internals in very simple words.<h1><a name="Multiple databases support">Multiple databases support</a></h1>Redis supports multiple databases with commands to atomically move keys from one database to the other. By default DB 0 is selected for every new connection, but using the SELECT command it is possible to select a different database. The MOVE operation can move an item from one DB to another atomically. This can be used as a base for locking free algorithms together with the 'RANDOMKEY' commands.<h1><a name="Know more about Redis!">Know more about Redis!</a></h1>To really get a feeling about what Redis is and how it works please try reading <a href="IntroductionToRedisDataTypes.html">A fifteen minutes introduction to Redis data types</a>.<br/><br/>To know a bit more about how Redis works <i>internally</i> continue reading.<h1><a name="Redis Tutorial">Redis Tutorial</a></h1>(note, you can skip this section if you are only interested in &quot;formal&quot; doc.)<br/><br/>Later in this document you can find detailed information about Redis commands,
+                    &iuml;&raquo;&iquest;= Introduction =<br/><br/>Redis is a database. To be specific, Redis is a database implementing a dictionary, where every key is associated with a value. For example I can set the key &quot;surname_1992&quot; to the string &quot;Smith&quot;.
+What makes Redis different from many other key-value stores, is that every single value has a type. The following types are supported:<br/><br/><ul><li> <a href="Strings.html">Strings</a></li><li> <a href="Lists.html">Lists</a></li><li> <a href="Sets.html">Sets</a></li><li> <a href="SortedSets.html">Sorted Set</a> (since version 1.1)</li></ul>
+The type of a value determines what operations (called commands) are available for the value itself. 
+For example you can append elements to a list stored at the key &quot;mylist&quot; using the LPUSH or RPUSH command in O(1). Later you'll be able to get a range of elements with LRANGE or trim the list with LTRIM. Sets are very flexible too, it is possible to add and remove elements from Sets (unsorted collections of strings), and then ask for server-side intersection, union, difference of Sets. Each command is performed through server-side atomic operations.
+Please refer to the <a href="CommandReference.html">Command Reference</a> to see the full list of operations associated to these data types.<br/><br/>In other words, you can look at Redis as a data structures server. A Redis user is virtually provided with an interface to  <a href="http://en.wikipedia.org/wiki/Abstract_data_type" target="_blank">Abstract Data Types</a>, saving her from the responsibility to implement concrete data structures and algorithms. Indeed both algorithms and data structures in Redis are properly choosed in order to obtain the best performance.<h1><a name="All data in memory, but saved on disk">All data in memory, but saved on disk</a></h1>Redis loads and mantains the whole dataset into memory, but the dataset is persistent, since at the same time it is saved on disk, so that when the server is restarted data can be loaded back in memory.<br/><br/>There are two kind of persistence supported: the first one is called snapshotting. In this mode Redis, from time to time, writes a dump on disk asynchronously. The dataset is loaded from the dump every time the server is (re)started.<br/><br/>Redis can be configured to save the dataset when a certain number of changes is reached and after a given number of seconds elapses. For example, you can configure Redis to save after 1000 changes and at most 60 seconds since the last save. You can specify any combination for these numbers.<br/><br/>Because data is written asynchronously, when a system crash occurs, the last few queries can get lost (that is acceptable in many applications but not in all).  In order to make this a non issue Redis supports another, safer persistence mode, called <a href="AppendOnlyFileHowto.html">Append Only File</a>, where every command received altering the dataset (so not a read-only command, but a write command) is written on an append only file ASAP. This commands are <i>replayed</i> when the server is restarted in order to rebuild the dataset in memory.<br/><br/>Redis Append Only File supports a very handy feature: the server is able to safely rebuild the append only file in background in a non-blocking fashion when it gets too long. You can find <a href="AppendOnlyFileHowto.html">more details in the Append Only File HOWTO</a>.<h1><a name="Master-Slave replication made trivial">Master-Slave replication made trivial</a></h1>Whatever will be the persistence mode you'll use Redis supports master-slave replications if you want to stay really safe or if you need to scale to huge amounts of reads.<br/><br/><b>Redis Replication is trivial to setup</b>. So trivial that all you need to do in order to configure a Redis server to be a slave of another one, with automatic synchronization if the link will go down and so forth, is the following config line: <code name="code" class="python">slaveof 192.168.1.100 6379</code>. <a href="ReplicationHowto.html">We provide a Replication Howto</a> if you want to know more about this feature.<h1><a name="It's persistent but supports expires">It's persistent but supports expires</a></h1>Redis can be used as a <b>memcached on steroids</b> because is as fast as memcached but with a number of features more. Like memcached, Redis also supports setting timeouts to keys so that this key will be automatically removed when a given amount of time passes.<h1><a name="Beyond key-value databases">Beyond key-value databases</a></h1>All these features allow to use Redis as the sole DB for your scalable application without the need of any relational database. <a href="TwitterAlikeExample.html">We wrote a simple Twitter clone in PHP + Redis</a> to show a real world example, the link points to an article explaining the design and internals in very simple words.<h1><a name="Multiple databases support">Multiple databases support</a></h1>Redis supports multiple databases with commands to atomically move keys from one database to the other. By default DB 0 is selected for every new connection, but using the SELECT command it is possible to select a different database. The MOVE operation can move an item from one DB to another atomically. This can be used as a base for locking free algorithms together with the 'RANDOMKEY' commands.<h1><a name="Know more about Redis!">Know more about Redis!</a></h1>To really get a feeling about what Redis is and how it works please try reading <a href="IntroductionToRedisDataTypes.html">A fifteen minutes introduction to Redis data types</a>.<br/><br/>To know a bit more about how Redis works <i>internally</i> continue reading.<h1><a name="Redis Tutorial">Redis Tutorial</a></h1>(note, you can skip this section if you are only interested in &quot;formal&quot; doc.)<br/><br/>Later in this document you can find detailed information about Redis commands,
 the protocol specification, and so on. This kind of documentation is useful
 but... if you are new to Redis it is also BORING! The Redis protocol is designed
 so that is both pretty efficient to be parsed by computers, but simple enough
@@ -71,7 +40,7 @@
 The server will start and log stuff on the standard output, if you want
 it to log more edit redis.conf, set the loglevel to debug, and restart it.<br/><br/>You can specify a configuration file as unique parameter:<br/><br/><blockquote>./redis-server /etc/redis.conf</blockquote>
 This is NOT required. The server will start even without a configuration file
-using a default built-in configuration.<br/><br/>Now let's try to set a key to a given value:<br/><br/><pre class="codeblock python python python" name="code">
+using a default built-in configuration.<br/><br/>Now let's try to set a key to a given value:<br/><br/><pre class="codeblock python" name="code">
 $ telnet localhost 6379
 Trying 127.0.0.1...
 Connected to localhost.
@@ -90,17 +59,17 @@
 Redis with the telnet command easily.<br/><br/>The last line of the chat between server and client is &quot;+OK&quot;. This means
 our key was added without problems. Actually SET can never fail but
 the &quot;+OK&quot; sent lets us know that the server received everything and
-the command was actually executed.<br/><br/>Let's try to get the key content now:<br/><br/><pre class="codeblock python python python python" name="code">
+the command was actually executed.<br/><br/>Let's try to get the key content now:<br/><br/><pre class="codeblock python python" name="code">
 GET foo
 $3
 bar
 </pre>Ok that's very similar to 'set', just the other way around. We sent &quot;get foo&quot;,
 the server replied with a first line that is just the $ character follwed by
 the number of bytes the value stored at key contained, followed by the actual
-bytes. Again &quot;\r\n&quot; are appended both to the bytes count and the actual data. In Redis slang this is called a bulk reply.<br/><br/>What about requesting a non existing key?<br/><br/><pre class="codeblock python python python python python" name="code">
+bytes. Again &quot;\r\n&quot; are appended both to the bytes count and the actual data. In Redis slang this is called a bulk reply.<br/><br/>What about requesting a non existing key?<br/><br/><pre class="codeblock python python python" name="code">
 GET blabla
 $-1
-</pre>When the key does not exist instead of the length, just the &quot;$-1&quot; string is sent. Since a -1 length of a bulk reply has no meaning it is used in order to specifiy a 'nil' value and distinguish it from a zero length value. Another way to check if a given key exists or not is indeed the EXISTS command:<br/><br/><pre class="codeblock python python python python python python" name="code">
+</pre>When the key does not exist instead of the length, just the &quot;$-1&quot; string is sent. Since a -1 length of a bulk reply has no meaning it is used in order to specifiy a 'nil' value and distinguish it from a zero length value. Another way to check if a given key exists or not is indeed the EXISTS command:<br/><br/><pre class="codeblock python python python python" name="code">
 EXISTS nokey
 :0
 EXISTS foo
Only in orig/redis-2.0.0/doc: Redis_2_0_0_Changelog.html
Only in orig/redis-2.0.0/doc: RedisCLI.html
diff -ur orig/redis-2.0.0/doc/SortedSetCommandsSidebar.html redis-2.0.0/doc/SortedSetCommandsSidebar.html
--- orig/redis-2.0.0/doc/SortedSetCommandsSidebar.html	2011-10-18 14:49:28.000000000 -0400
+++ redis-2.0.0/doc/SortedSetCommandsSidebar.html	2011-05-31 16:20:53.000000000 -0400
@@ -26,7 +26,7 @@
                 </div>
 
                 <div class="narrow">
-                    &iuml;&raquo;&iquest;== Sorted Set Commands ==<br/><br/><ul><li> <a href="ZaddCommand.html">ZADD</a></li><li> <a href="ZremCommand.html">ZREM</a></li><li> <a href="ZincrbyCommand.html">ZINCRBY</a></li><li> <a href="ZrankCommand.html">ZRANK</a></li><li> <a href="ZrankCommand.html">ZREVRANK</a></li><li> <a href="ZrangeCommand.html">ZRANGE</a></li><li> <a href="ZrangeCommand.html">ZREVRANGE</a></li><li> <a href="ZrangebyscoreCommand.html">ZRANGEBYSCORE</a></li><li> <a href="ZrangebyscoreCommand.html">ZCOUNT</a></li><li> <a href="ZremrangebyrankCommand.html">ZREMRANGEBYRANK</a></li><li> <a href="ZremrangebyscoreCommand.html">ZREMRANGEBYSCORE</a> </li><li> <a href="ZcardCommand.html">ZCARD</a></li><li> <a href="ZscoreCommand.html">ZSCORE</a></li><li> <a href="ZunionstoreCommand.html">ZUNIONSTORE</a></li><li> <a href="ZunionstoreCommand.html">ZINTERSTORE</a></li><li> <a href="SortCommand.html">SORT</a></li></ul>
+                    &iuml;&raquo;&iquest;== Sorted Set Commands ==<br/><br/><ul><li> <a href="ZaddCommand.html">ZADD</a></li><li> <a href="ZremCommand.html">ZREM</a></li><li> <a href="ZincrbyCommand.html">ZINCRBY</a></li><li> <a href="ZrankCommand.html">ZRANK</a></li><li> <a href="ZrankCommand.html">ZREVRANK</a></li><li> <a href="ZrangeCommand.html">ZRANGE</a></li><li> <a href="ZrangeCommand.html">ZREVRANGE</a></li><li> <a href="ZrangebyscoreCommand.html">ZRANGEBYSCORE</a></li><li> <a href="ZremrangebyrankCommand.html">ZREMRANGEBYRANK</a></li><li> <a href="ZremrangebyscoreCommand.html">ZREMRANGEBYSCORE</a> </li><li> <a href="ZcardCommand.html">ZCARD</a></li><li> <a href="ZscoreCommand.html">ZSCORE</a></li><li> <a href="ZunionstoreCommand.html">ZUNIONSTORE</a></li><li> <a href="ZunionstoreCommand.html">ZINTERSTORE</a></li><li> <a href="SortCommand.html">SORT</a></li></ul>
                 </div>
         
             </div>
diff -ur orig/redis-2.0.0/doc/SupportedLanguages.html redis-2.0.0/doc/SupportedLanguages.html
--- orig/redis-2.0.0/doc/SupportedLanguages.html	2011-10-18 14:49:28.000000000 -0400
+++ redis-2.0.0/doc/SupportedLanguages.html	2011-05-31 16:20:53.000000000 -0400
@@ -28,7 +28,7 @@
                 <div class="narrow">
                     <h1><a name="Supported Languages (DRAFT)">Supported Languages (DRAFT)</a></h1>Wondering if you can use Redis from your favorite language? Well here is the definitive guide to the available client libraries.<br/><br/>This libraries are intended to expose Redis commands, but you also have the option to use some higher level libraries that provide a <b><a href="ObjectHashMappers.html">Object Hash Mappings</a></b> pretty much the same idea implemented by a classic <b>ORM</b>.<h2><a name="TODO">TODO</a></h2><ul><li> Add <a href="http://github.com/madsimian/em-redis" target="_blank">http://github.com/madsimian/em-redis</a></li><li> Add <a href="http://github.com/besquared/redis-datastructures" target="_blank">http://github.com/besquared/redis-datastructures</a></li><li> Add <a href="http://github.com/sma/redis-node-client" target="_blank">http://github.com/sma/redis-node-client</a></li></ul>
 <h2><a name="Features Support Matrix">Features Support Matrix</a></h2>        <br/><br/>The following matrix should give you a quick overviwe of the state of the different client libraries existing for each supported language.<br/><br/>The core command set is the one of Version 1.0, while <a href="Sharding.html">Sharding</a> and <a href="Pipelining.html">Pipelining</a> are convenient client side features not tied to any Redis server version.<h3><a name="Version 1.1">Version 1.1</a></h3>Compatible client libraries are expected to implement the command sets specified in <b>Version 1.0</b> plus:<br/><br/><ul><li> <b>String</b>: MSET, MSETNX.</li><li> <b>List</b>: RPOPLPUSH.</li><li> <b>Sorted Set (ZSET)</b>: ZADD, ZREM, ZRANGE, ZREVRANGE, ZRANGEBYSCORE, ZCARD, ZSCORE.</li></ul>
-<h3><a name="Version 1.0">Version 1.0</a></h3> <br/><br/>Compatible client libraries are expected to implement the following command sets:<br/><br/><ul><li> <b>String</b>: GET, SET, SETNX, DEL, EXISTS, INCR, DECR, MGET, INCRBY, DECRBY, GETSET, TYPE.</li><li> <b>List</b>: RPUSH, LPUSH, RPOP, LPOP, LLEN, LINDEX, LSET, LRANGE, LTRIM, LREM.</li><li> <b>Set</b>: SADD, SREM, SMOVE, SISMEMBER, SCARD, SPOP, SINTER, SINTERSTORE, SUNION, SUNIONSTORE, SDIFF, SDIFFSTORE, SMEMBERS.</li><li> <b>Keyspace</b>: KEYS, RANDOMKEY, RENAME, RENAMENX, DBSIZE, EXPIRE, TTL.</li><li> <b>Databases</b>: SELECT, MOVE, FLUSHDB, FLUSHALL.</li><li> <b>Sort</b>: SORT</li><li> <b>Connection</b>: AUTH, QUIT?. ???</li><li> <b>Persistence</b>: SAVE, BGSAVE, LASTSAVE, SHUTDOWN?. ???</li><li> <b>Server</b>: INFO, MONITOR? SLAVEOF? ???</li></ul><blockquote></blockquote><table><tr><td style="border: 1px solid #aaa; padding: 5px;"> <b>Language</b>    </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Name</b>              </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Sharding</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Pipelining</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>1.1</b>   </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>1.0</b>      </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> ActionScript 3</td><td style="border: 1px solid #aaa; padding: 5px;"> as3redis            </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes          </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes     </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Clojure       </td><td style="border: 1px solid #aaa; padding: 5px;"> redis-clojure       </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> Partial </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Common Lisp         </td><td style="border: 1px solid #aaa; padding: 5px;"> CL-Redis            </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> No      </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Erlang        </td><td style="border: 1px solid #aaa; padding: 5px;"> erldis              </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> Looks like   </td><td style="border: 1px solid #aaa; padding: 5px;"> No      </td><td style="border: 1px solid #aaa; padding: 5px;"> Looks like </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Go            </td><td style="border: 1px solid #aaa; padding: 5px;"> Go-Redis            </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes          </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes     </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Haskell       </td><td style="border: 1px solid #aaa; padding: 5px;"> haskell-redis       </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> No      </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Java          </td><td style="border: 1px solid #aaa; padding: 5px;"> JDBC-Redis          </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> No      </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Java          </td><td style="border: 1px solid #aaa; padding: 5px;"> JRedis              </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes          </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes     </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Java          </td><td style="border: 1px solid #aaa; padding: 5px;"> Jedis              </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes          </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes     </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> LUA           </td><td style="border: 1px solid #aaa; padding: 5px;"> redis-lua           </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes     </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Perl          </td><td style="border: 1px solid #aaa; padding: 5px;"> Redis Client        </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> No      </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Perl          </td><td style="border: 1px solid #aaa; padding: 5px;"> AnyEvent::Redis     </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> No      </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> PHP           </td><td style="border: 1px solid #aaa; padding: 5px;"> Redis PHP Bindings  </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> No      </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> PHP           </td><td style="border: 1px solid #aaa; padding: 5px;"> phpredis (C)        </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> No      </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> PHP           </td><td style="border: 1px solid #aaa; padding: 5px;"> Predis              </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes          </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes     </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> PHP           </td><td style="border: 1px solid #aaa; padding: 5px;"> Redisent            </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> No      </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Python        </td><td style="border: 1px solid #aaa; padding: 5px;"> Python Client       </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> No      </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Python        </td><td style="border: 1px solid #aaa; padding: 5px;"> py-redis            </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> Partial </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Python        </td><td style="border: 1px solid #aaa; padding: 5px;"> txredis             </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> No      </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Ruby          </td><td style="border: 1px solid #aaa; padding: 5px;"> redis-rb            </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes          </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes     </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Scala         </td><td style="border: 1px solid #aaa; padding: 5px;"> scala-redis         </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> No      </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> TCL           </td><td style="border: 1px solid #aaa; padding: 5px;"> TCL                 </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes     </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr></table>
+<h3><a name="Version 1.0">Version 1.0</a></h3> <br/><br/>Compatible client libraries are expected to implement the following command sets:<br/><br/><ul><li> <b>String</b>: GET, SET, SETNX, DEL, EXISTS, INCR, DECR, MGET, INCRBY, DECRBY, GETSET, TYPE.</li><li> <b>List</b>: RPUSH, LPUSH, RPOP, LPOP, LLEN, LINDEX, LSET, LRANGE, LTRIM, LREM.</li><li> <b>Set</b>: SADD, SREM, SMOVE, SISMEMBER, SCARD, SPOP, SINTER, SINTERSTORE, SUNION, SUNIONSTORE, SDIFF, SDIFFSTORE, SMEMBERS.</li><li> <b>Keyspace</b>: KEYS, RANDOMKEY, RENAME, RENAMENX, DBSIZE, EXPIRE, TTL.</li><li> <b>Databases</b>: SELECT, MOVE, FLUSHDB, FLUSHALL.</li><li> <b>Sort</b>: SORT</li><li> <b>Connection</b>: AUTH, QUIT?. ???</li><li> <b>Persistence</b>: SAVE, BGSAVE, LASTSAVE, SHUTDOWN?. ???</li><li> <b>Server</b>: INFO, MONITOR? SLAVEOF? ???</li></ul><blockquote></blockquote><table><tr><td style="border: 1px solid #aaa; padding: 5px;"> <b>Language</b>    </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Name</b>              </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Sharding</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>Pipelining</b> </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>1.1</b>   </td><td style="border: 1px solid #aaa; padding: 5px;"> <b>1.0</b>      </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> ActionScript 3</td><td style="border: 1px solid #aaa; padding: 5px;"> as3redis            </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes          </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes     </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Clojure       </td><td style="border: 1px solid #aaa; padding: 5px;"> redis-clojure       </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> Partial </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Common Lisp         </td><td style="border: 1px solid #aaa; padding: 5px;"> CL-Redis            </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> No      </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Erlang        </td><td style="border: 1px solid #aaa; padding: 5px;"> erldis              </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> Looks like   </td><td style="border: 1px solid #aaa; padding: 5px;"> No      </td><td style="border: 1px solid #aaa; padding: 5px;"> Looks like </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Go            </td><td style="border: 1px solid #aaa; padding: 5px;"> Go-Redis            </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes          </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes     </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Haskell       </td><td style="border: 1px solid #aaa; padding: 5px;"> haskell-redis       </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> No      </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Java          </td><td style="border: 1px solid #aaa; padding: 5px;"> JDBC-Redis          </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> No      </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Java          </td><td style="border: 1px solid #aaa; padding: 5px;"> JRedis              </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes          </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes     </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> LUA           </td><td style="border: 1px solid #aaa; padding: 5px;"> redis-lua           </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes     </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Perl          </td><td style="border: 1px solid #aaa; padding: 5px;"> Redis Client        </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> No      </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Perl          </td><td style="border: 1px solid #aaa; padding: 5px;"> AnyEvent::Redis     </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> No      </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> PHP           </td><td style="border: 1px solid #aaa; padding: 5px;"> Redis PHP Bindings  </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> No      </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> PHP           </td><td style="border: 1px solid #aaa; padding: 5px;"> phpredis (C)        </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> No      </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> PHP           </td><td style="border: 1px solid #aaa; padding: 5px;"> Predis              </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes          </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes     </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> PHP           </td><td style="border: 1px solid #aaa; padding: 5px;"> Redisent            </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> No      </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Python        </td><td style="border: 1px solid #aaa; padding: 5px;"> Python Client       </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> No      </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Python        </td><td style="border: 1px solid #aaa; padding: 5px;"> py-redis            </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> Partial </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Python        </td><td style="border: 1px solid #aaa; padding: 5px;"> txredis             </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> No      </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Ruby          </td><td style="border: 1px solid #aaa; padding: 5px;"> redis-rb            </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes          </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes     </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> Scala         </td><td style="border: 1px solid #aaa; padding: 5px;"> scala-redis         </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> No      </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr><tr><td style="border: 1px solid #aaa; padding: 5px;"> TCL           </td><td style="border: 1px solid #aaa; padding: 5px;"> TCL                 </td><td style="border: 1px solid #aaa; padding: 5px;"> No         </td><td style="border: 1px solid #aaa; padding: 5px;"> No           </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes     </td><td style="border: 1px solid #aaa; padding: 5px;"> Yes        </td></tr></table>
 <h2><a name="Client Libraries Reference">Client Libraries Reference</a></h2><h3><a name="as3 (ActionScript 3)">as3 (ActionScript 3)</a></h3><ul><li> An ActionScript 3 (Flash) library for Redis.</li><li> Repository: <a href="http://github.com/claus/as3redis" target="_blank">http://github.com/claus/as3redis</a></li><li> Author: Claus Wahlers, <a href="http://twitter.com/cwahlers" target="_blank">        @cwahlers</a>.</li></ul>
 <h3><a name="redis-clojure (Clojure)">redis-clojure (Clojure)</a></h3><ul><li> A Clojure client library for the key-value storage system Redis.</li><li> Repository: <a href="http://github.com/ragnard/redis-clojure" target="_blank">http://github.com/ragnard/redis-clojure</a></li><li> Author: Ragnar Dahl&Atilde;&copy;n, <a href="http://twitter.com/ragge" target="_blank">@ragge</a>.</li></ul>
 <h3><a name="CL-Redis (Common Lisp)">CL-Redis (Common Lisp)</a></h3><ul><li> Common Lisp client library for Redis, an advanced key/value store.</li><li> Home Page: <a href="http://www.cliki.net/cl-redis" target="_blank">http://www.cliki.net/cl-redis</a></li><li> Author: Mahmud, <a href="http://twitter.com/BigThingist" target="_blank">@BigThingist</a>.</li></ul>
@@ -36,8 +36,7 @@
 <h3><a name="Go-Redis (Go)">Go-Redis (Go)</a></h3><ul><li> Client protocol for redis key-value store.</li><li> Author: Joubin Houshyar, <a href="http://twitter.com/SunOf27" target="_blank">@SunOf27</a>.</li><li> Repository: <a href="http://github.com/alphazero/Go-Redis" target="_blank">http://github.com/alphazero/Go-Redis</a></li></ul>
 <h3><a name="haskell-redis (Haskell)">haskell-redis (Haskell)</a></h3><ul><li> A Haskell binding for the Redis database.</li><li> Author: <a href="http://obvioushints.blogspot.com/" target="_blank">Alvaro Videla</a>, <a href="http://twitter.com/old_sound" target="_blank">@old_sound</a>.</li><li> Repository: <a href="http://bitbucket.org/videlalvaro/redis-haskell/wiki/Home" target="_blank">       </a></li></ul>
 <h3><a name="Java">Java</a></h3><h4><a name="JDBC-Redis">JDBC-Redis</a></h4><ul><li> JDBC-Redis is Java driver using the JDBC interface for Redis Database. This project doesn't aim for a complete implementation of the JDBC specification since Redis isn't a relational database, but should provide a familiar interface to Java developers interact with Redis.</li><li> Repository: <a href="http://code.google.com/p/jdbc-redis/" target="_blank">http://code.google.com/p/jdbc-redis/</a></li></ul>
-<h4><a name="JRedis">JRedis</a></h4><ul><li> Java Client and Connectors for Redis JCA compliant. Currently offers a complete functioning Synchronous connector, Asynchronous connection and pipelining support under heavy development.</li><li> Author: Joubin Houshyar, <a href="http://twitter.com/SunOf27" target="_blank">@SunOf27</a>.</li><li> Home: <a href="http://code.google.com/p/jredis/" target="_blank">http://code.google.com/p/jredis/</a></li><li> Repository: <a href="http://github.com/alphazero/jredis" target="_blank">http://github.com/alphazero/jredis</a></li></ul>
-<h4><a name="Jedis">Jedis</a></h4><ul><li> Jedis is a small and sane Redis client for Java. It aims to be easier to use by providing a more natural API. It currently supports the binary-safe protocol and pipelining. Sharding and connection pooling is on the way.</li><li> Author: Jonathan Leibiusky, <a href="http://twitter.com/xetorthio" target="_blank">@xetorthio</a>.</li><li> Repository: <a href="http://github.com/xetorthio/jedis" target="_blank">http://github.com/xetorthio/jedis</a></li></ul>
+<h4><a name="JRedis">JRedis</a></h4><ul><li> Java Client and Connectors for Redis JCA compliant. Currently offers a complete functioning Synchronous connector, Asynchronous connection and pipelining support under heavy develpment.</li><li> Author: Joubin Houshyar, <a href="http://twitter.com/SunOf27" target="_blank">@SunOf27</a>.</li><li> Home: <a href="http://code.google.com/p/jredis/" target="_blank">http://code.google.com/p/jredis/</a></li><li> Repository: <a href="http://github.com/alphazero/jredis" target="_blank">http://github.com/alphazero/jredis</a></li></ul>
 <h3><a name="redis-lua (Lua)">redis-lua (Lua)</a></h3><ul><li> A Lua client library for the redis key value storage system.</li><li> Author: <a href="http://www.clorophilla.net/blog/" target="_blank">Daniele Alessandri</a>, <a href="http://twitter.com/jol1hahn" target="_blank">@jol1hahn</a>.</li><li> Repository: <a href="http://github.com/nrk/redis-lua" target="_blank">http://github.com/nrk/redis-lua</a></li></ul>
 <h3><a name="Perl">Perl</a></h3><h4><a name="Perl Client">Perl Client</a></h4><ul><li> Perl binding for Redis database.</li><li> Author: <a href="http://blog.rot13.org/" target="_blank">Dobrica Pavlinusic</a>, <a href="http://twitter.com/dpavlin" target="_blank">@dpavlin</a>.</li><li> Repository: <a href="http://svn.rot13.org/index.cgi/Redis" target="_blank">http://svn.rot13.org/index.cgi/Redis</a></li></ul>
 <h4><a name="AnyEvent::Redis">AnyEvent::Redis</a></h4><ul><li> Non-blocking Redis client.</li><li> Author: <a href="http://bulknews.typepad.com/" target="_blank">Tatsuhiko Miyagawa</a>, <a href="http://twitter.com/miyagawa" target="_blank">@miyagawa</a>.</li><li> Repository: <a href="http://github.com/miyagawa/AnyEvent-Redis/" target="_blank">http://github.com/miyagawa/AnyEvent-Redis/</a></li></ul>
Only in orig/redis-2.0.0/doc: UDP.html
diff -ur orig/redis-2.0.0/doc/ZrangebyscoreCommand.html redis-2.0.0/doc/ZrangebyscoreCommand.html
--- orig/redis-2.0.0/doc/ZrangebyscoreCommand.html	2011-10-18 14:49:28.000000000 -0400
+++ redis-2.0.0/doc/ZrangebyscoreCommand.html	2011-05-31 16:20:53.000000000 -0400
@@ -16,7 +16,7 @@
             <div id="pagecontent">
                 <div class="index">
 <!-- This is a (PRE) block.  Make sure it's left aligned or your toc title will be off. -->
-<b>ZrangebyscoreCommand: Contents</b><br>&nbsp;&nbsp;<a href="#ZRANGEBYSCORE _key_ _min_ _max_ `[`LIMIT _offset_ _count_`]` (Redis &gt;">ZRANGEBYSCORE _key_ _min_ _max_ `[`LIMIT _offset_ _count_`]` (Redis &gt;</a><br>&nbsp;&nbsp;<a href="#ZRANGEBYSCORE _key_ _min_ _max_ `[`LIMIT _offset_ _count_`]` `[`WITHSCORES`]` (Redis &gt;">ZRANGEBYSCORE _key_ _min_ _max_ `[`LIMIT _offset_ _count_`]` `[`WITHSCORES`]` (Redis &gt;</a><br>&nbsp;&nbsp;<a href="#ZCOUNT _key_ _min_ _max_">ZCOUNT _key_ _min_ _max_</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Exclusive intervals and infinity">Exclusive intervals and infinity</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Return value">Return value</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Examples">Examples</a>
+<b>ZrangebyscoreCommand: Contents</b><br>&nbsp;&nbsp;<a href="#ZRANGEBYSCORE _key_ _min_ _max_ `[`LIMIT _offset_ _count_`]` (Redis &gt;">ZRANGEBYSCORE _key_ _min_ _max_ `[`LIMIT _offset_ _count_`]` (Redis &gt;</a><br>&nbsp;&nbsp;<a href="#ZRANGEBYSCORE _key_ _min_ _max_ `[`LIMIT _offset_ _count_`]` `[`WITHSCORES`]` (Redis &gt;">ZRANGEBYSCORE _key_ _min_ _max_ `[`LIMIT _offset_ _count_`]` `[`WITHSCORES`]` (Redis &gt;</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Exclusive intervals and infinity">Exclusive intervals and infinity</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Return value">Return value</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Examples">Examples</a>
                 </div>
                 
                 <h1 class="wikiname">ZrangebyscoreCommand</h1>
@@ -28,11 +28,9 @@
                 <div class="narrow">
                     &iuml;&raquo;&iquest;#sidebar <a href="SortedSetCommandsSidebar.html">SortedSetCommandsSidebar</a><h1><a name="ZRANGEBYSCORE _key_ _min_ _max_ `[`LIMIT _offset_ _count_`]` (Redis &gt;">ZRANGEBYSCORE _key_ _min_ _max_ `[`LIMIT _offset_ _count_`]` (Redis &gt;</a></h1> 1.1) =
 <h1><a name="ZRANGEBYSCORE _key_ _min_ _max_ `[`LIMIT _offset_ _count_`]` `[`WITHSCORES`]` (Redis &gt;">ZRANGEBYSCORE _key_ _min_ _max_ `[`LIMIT _offset_ _count_`]` `[`WITHSCORES`]` (Redis &gt;</a></h1> 1.3.4) =
-<h1><a name="ZCOUNT _key_ _min_ _max_">ZCOUNT _key_ _min_ _max_</a></h1>
 <i>Time complexity: O(log(N))+O(M) with N being the number of elements in the sorted set and M the number of elements returned by the command, so if M is constant (for instance you always ask for the first ten elements with LIMIT) you can consider it O(log(N))</i><blockquote>Return the all the elements in the sorted set at key with a score between_min_ and <i>max</i> (including elements with score equal to min or max).</blockquote>
 <blockquote>The elements having the same score are returned sorted lexicographically asASCII strings (this follows from a property of Redis sorted sets and does notinvolve further computation).</blockquote>
-<blockquote>Using the optional LIMIT it's possible to get only a range of the matchingelements in an SQL-alike way. Note that if <i>offset</i> is large the commandsneeds to traverse the list for <i>offset</i> elements and this adds up to theO(M) figure.</blockquote>
-<blockquote>The <b>ZCOUNT</b> command is similar to <b>ZRANGEBYSCORE</b> but instead of returningthe actual elements in the specified interval, it just returns the numberof matching elements.</blockquote><h2><a name="Exclusive intervals and infinity">Exclusive intervals and infinity</a></h2>
+<blockquote>Using the optional LIMIT it's possible to get only a range of the matchingelements in an SQL-alike way. Note that if <i>offset</i> is large the commandsneeds to traverse the list for <i>offset</i> elements and this adds up to theO(M) figure.</blockquote><h2><a name="Exclusive intervals and infinity">Exclusive intervals and infinity</a></h2>
 <i>min</i> and <i>max</i> can be -inf and +inf, so that you are not required to know what's the greatest or smallest element in order to take, for instance, elements &quot;up to a given value&quot;.<br/><br/>Also while the interval is for default closed (inclusive) it's possible to specify open intervals prefixing the score with a &quot;(&quot; character, so for instance:
 <pre class="codeblock python" name="code">
 ZRANGEBYSCORE zset (1.3 5
@@ -42,7 +40,7 @@
 ZRANGEBYSCORE zset (5 (10
 </pre>
 Will return all the values with score <b>&gt; 5 and &lt; 10</b> (5 and 10 excluded).
-<h2><a name="Return value">Return value</a></h2>ZRANGEBYSCORE returns a <a href="ReplyTypes.html">Multi bulk reply</a> specifically a list of elements in the specified score range.<br/><br/>ZCOUNT returns a <a href="ReplyTypes.html">Integer reply</a> specifically the number of elements matching the specified score range.
+<h2><a name="Return value">Return value</a></h2><a href="ReplyTypes.html">Multi bulk reply</a>, specifically a list of elements in the specified score range.
 <h2><a name="Examples">Examples</a></h2>
 <pre class="codeblock python python python" name="code">
 redis&gt; zadd zset 1 foo
@@ -58,8 +56,6 @@
 2. &quot;bar&quot;
 3. &quot;biz&quot;
 4. &quot;foz&quot;
-redis&gt; zcount zset 1 2
-(integer) 2
 redis&gt; zrangebyscore zset 1 2
 1. &quot;foo&quot;
 2. &quot;bar&quot;
Only in orig/redis-2.0.0: doredisbench.sh
Only in redis-2.0.0: dsu.c
diff -ur orig/redis-2.0.0/Makefile redis-2.0.0/Makefile
--- orig/redis-2.0.0/Makefile	2011-10-18 14:49:28.000000000 -0400
+++ redis-2.0.0/Makefile	2012-01-13 22:58:40.992578000 -0500
@@ -2,6 +2,22 @@
 # Copyright (C) 2009 Salvatore Sanfilippo <antirez at gmail dot com>
 # This file is released under the BSD license, see the COPYING file
 
+LASTVERSION=2.0.0
+VERSION=2.0.0
+
+# EKIDEN
+EKINC  = -I../../../bin/
+EKLIB  = ../../../bin/libkitsune-threads.a
+CFLAGS_SHARED  = -Wall -ldl -shared -fPIC -u kitsune_init_inplace
+CFLAGS = -O2 -Wall -ldl -fPIC $(EKINC) $(EKLIB)
+EKDRV = ../../../bin/driver
+EKCC = ../../../tools/bin/ktcc --doglobalreg --dostackvars --keepunused -include fmacros.h -include kitsune.h
+EKJOIN = ../../../tools/bin/kttjoin
+EKGEN = ../../../tools/bin/xfgen
+
+USER_XFORM=redis.xf
+GENERATED_XFORM=dsu.c
+
 release_hdr := $(shell sh -c './mkreleasehdr.sh')
 uname_S := $(shell sh -c 'uname -s 2>/dev/null || echo not')
 OPTIMIZATION?=-O2
@@ -21,13 +37,13 @@
 CHECKDUMPOBJ = redis-check-dump.o lzf_c.o lzf_d.o
 CHECKAOFOBJ = redis-check-aof.o
 
-PRGNAME = redis-server
+RUNLIBNAME = redis-server.so
 BENCHPRGNAME = redis-benchmark
 CLIPRGNAME = redis-cli
 CHECKDUMPPRGNAME = redis-check-dump
 CHECKAOFPRGNAME = redis-check-aof
 
-all: redis-server redis-benchmark redis-cli redis-check-dump redis-check-aof
+all: redis-server #redis-benchmark redis-cli redis-check-dump redis-check-aof
 
 # Deps (use make dep to generate this)
 adlist.o: adlist.c adlist.h zmalloc.h
@@ -55,31 +71,33 @@
 zipmap.o: zipmap.c zmalloc.h
 zmalloc.o: zmalloc.c config.h
 
-redis-server: $(OBJ)
-	$(CC) -o $(PRGNAME) $(CCOPT) $(DEBUG) $(OBJ) $(CCLINK)
-	@echo ""
-	@echo "Hint: To run the test-redis.tcl script is a good idea."
-	@echo "Launch the redis server with ./redis-server, then in another"
-	@echo "terminal window enter this directory and run 'make test'."
-	@echo ""
-
-redis-benchmark: $(BENCHOBJ)
-	$(CC) -o $(BENCHPRGNAME) $(CCOPT) $(DEBUG) $(BENCHOBJ)
+redis-server: $(OBJ) $(GENERATED_XFORM)
+	$(CC)  -o $(RUNLIBNAME) $(CFLAGS_SHARED) $(DEBUG) $(OBJ) $(GENERATED_XFORM) $(EKINC) $(EKLIB) $(CCLINK)
+	cp redis-server.so redis-server2.so
+
+# redis-benchmark: $(BENCHOBJ)
+# 	$(CC) -o $(BENCHPRGNAME) $(CCOPT) $(DEBUG) $(BENCHOBJ)
+
+# redis-cli: $(CLIOBJ)
+# 	$(CC) -o $(CLIPRGNAME) $(CCOPT) $(DEBUG) $(CLIOBJ)
+
+# redis-check-dump: $(CHECKDUMPOBJ)
+# 	$(CC) -o $(CHECKDUMPPRGNAME) $(CCOPT) $(DEBUG) $(CHECKDUMPOBJ)
 
-redis-cli: $(CLIOBJ)
-	$(CC) -o $(CLIPRGNAME) $(CCOPT) $(DEBUG) $(CLIOBJ)
+# redis-check-aof: $(CHECKAOFOBJ)
+# 	$(CC) -o $(CHECKAOFPRGNAME) $(CCOPT) $(DEBUG) $(CHECKAOFOBJ)
 
-redis-check-dump: $(CHECKDUMPOBJ)
-	$(CC) -o $(CHECKDUMPPRGNAME) $(CCOPT) $(DEBUG) $(CHECKDUMPOBJ)
+redis-$(VERSION).ktt: $(OBJ)
+	$(EKJOIN) $@ $(patsubst %.o,%.ktt,$(OBJ))
 
-redis-check-aof: $(CHECKAOFOBJ)
-	$(CC) -o $(CHECKAOFPRGNAME) $(CCOPT) $(DEBUG) $(CHECKAOFOBJ)
+$(GENERATED_XFORM): redis-$(VERSION).ktt $(USER_XFORM)
+	$(EKGEN) $@ ../redis-$(LASTVERSION)/redis-$(LASTVERSION).ktt redis-$(VERSION).ktt $(USER_XFORM)
 
 .c.o:
-	$(CC) -c $(CFLAGS) $(DEBUG) $(COMPILE_TIME) $<
+	$(EKCC) -c $(CFLAGS) -fvisibility=hidden $(DEBUG) $(COMPILE_TIME) $< --doktsavetypes --typesfile-out=$*.ktt
 
 clean:
-	rm -rf $(PRGNAME) $(BENCHPRGNAME) $(CLIPRGNAME) $(CHECKDUMPPRGNAME) $(CHECKAOFPRGNAME) *.o *.gcda *.gcno *.gcov
+	rm -rf $(RUNLIBNAME) $(BENCHPRGNAME) $(CLIPRGNAME) $(CHECKDUMPPRGNAME) $(CHECKAOFPRGNAME) *.o *.cil.c *.i *.gcda *.gcno *.gcov *.ktt $(GENERATED_XFORM)
 
 dep:
 	$(CC) -MM *.c
Only in orig/redis-2.0.0: redis-benchmark.c
diff -ur orig/redis-2.0.0/redis.c redis-2.0.0/redis.c
--- orig/redis-2.0.0/redis.c	2011-10-18 14:49:28.000000000 -0400
+++ redis-2.0.0/redis.c	2012-04-12 12:23:01.265316000 -0400
@@ -255,7 +255,7 @@
 
 /* The actual Redis Object */
 typedef struct redisObject {
-    void *ptr;
+  void * E_OPAQUE ptr; /**DSU xfgen */
     unsigned char type;
     unsigned char encoding;
     unsigned char storage;  /* If this object is a key, where is the value?
@@ -283,22 +283,26 @@
 } while(0);
 
 typedef struct redisDb {
-    dict *dict;                 /* The keyspace for this DB */
-    dict *expires;              /* Timeout of keys with a timeout set */
-    dict *blockingkeys;         /* Keys with clients waiting for data (BLPOP) */
-    dict *io_keys;              /* Keys with clients waiting for VM I/O */
+  dict E_G(robj*,robj*) *dict;           /* The keyspace for this DB */ /**DSU xfgen */
+    /* 
+       The value stored for expired is a time_t casted to a void pointer.
+       We use [opaque] to be sure that it is transferred correctly.
+     */
+  dict E_G(robj*,[opaque]) *expires;              /* Timeout of keys with a timeout set */ /**DSU xfgen */
+  dict E_G(robj*,list<redisClient*>*) *blockingkeys;         /* Keys with clients waiting for data (BLPOP) */ /**DSU xfgen */
+  dict E_G(robj*,list<redisClient*>*) *io_keys;              /* Keys with clients waiting for VM I/O */ /**DSU xfgen */
     int id;
 } redisDb;
 
 /* Client MULTI/EXEC state */
 typedef struct multiCmd {
-    robj **argv;
+  robj ** E_PTRARRAY(self.argc) argv; /**DSU xfgen */
     int argc;
     struct redisCommand *cmd;
 } multiCmd;
 
 typedef struct multiState {
-    multiCmd *commands;     /* Array of MULTI commands */
+  multiCmd * E_PTRARRAY(self.count) commands;     /* Array of MULTI commands */ /**DSU xfgen */
     int count;              /* Total number of MULTI commands */
 } multiState;
 
@@ -309,11 +313,11 @@
     redisDb *db;
     int dictid;
     sds querybuf;
-    robj **argv, **mbargv;
+  robj ** E_PTRARRAY(self.argc) argv, ** E_PTRARRAY(self.mbargc) mbargv; /**DSU xfgen */
     int argc, mbargc;
     int bulklen;            /* bulk read len. -1 if not in bulk read mode */
     int multibulk;          /* multi bulk command format active */
-    list *reply;
+  list E_G(robj *) *reply; /**DSU xfgen */
     int sentlen;
     time_t lastinteraction; /* time of the last interaction, used for timeout */
     int flags;              /* REDIS_SLAVE | REDIS_MONITOR | REDIS_MULTI ... */
@@ -324,15 +328,17 @@
     long repldboff;         /* replication DB file offset */
     off_t repldbsize;       /* replication DB file size */
     multiState mstate;      /* MULTI/EXEC state */
-    robj **blockingkeys;    /* The key we are waiting to terminate a blocking
-                             * operation such as BLPOP. Otherwise NULL. */
+  robj ** E_PTRARRAY(self.blockingkeysnum) blockingkeys;    /* The key we are waiting to terminate a blocking*/ /**DSU xfgen */
+                            /* operation such as BLPOP. Otherwise NULL. */
     int blockingkeysnum;    /* Number of blocking keys */
     time_t blockingto;      /* Blocking operation timeout. If UNIX current time
                              * is >= blockingto then the operation timed out. */
-    list *io_keys;          /* Keys this client is waiting to be loaded from the
+  list E_G(robj *) *io_keys;   /**DSU xfgen */       /* Keys this client is waiting to be loaded from the 
                              * swap file in order to continue. */
-    dict *pubsub_channels;  /* channels a client is interested in (SUBSCRIBE) */
-    list *pubsub_patterns;  /* patterns a client is interested in (SUBSCRIBE) */
+                             dict E_G(robj *, [opaque]) *pubsub_channels; /**DSU xfgen */
+                            /* channels a client is interested in (SUBSCRIBE) */
+  list E_G(robj *) *pubsub_patterns;   /**DSU xfgen */
+                            /* patterns a client is interested in (SUBSCRIBE) */
 } redisClient;
 
 struct saveparam {
@@ -345,15 +351,16 @@
     pthread_t mainthread;
     int port;
     int fd;
-    redisDb *db;
+  redisDb * E_PTRARRAY(self.dbnum) db; /**DSU xfgen */
     long long dirty;            /* changes to DB from the last save */
     long long dirty_before_bgsave; /* used to restore dirty on failed BGSAVE */
-    list *clients;
-    list *slaves, *monitors;
+  list E_G(redisClient *) *clients; /**DSU xfgen */
+  list E_G(redisClient *) *slaves;  /**DSU xfgen */
+  list E_G(redisClient *) *monitors; /**DSU xfgen */
     char neterr[ANET_ERR_LEN];
     aeEventLoop *el;
     int cronloops;              /* number of times the cron function run */
-    list *objfreelist;          /* A list of freed objects to avoid malloc() */
+  list E_G(robj *) *objfreelist;          /* A list of freed objects to avoid malloc() */ /**DSU xfgen */
     time_t lastsave;            /* Unix time of last save succeeede */
     /* Fields used only for stats */
     time_t stat_starttime;         /* server start time */
@@ -412,7 +419,7 @@
     size_t hash_max_zipmap_entries;
     size_t hash_max_zipmap_value;
     /* Virtual memory state */
-    FILE *vm_fp;
+  FILE * E_OPAQUE vm_fp; /**DSU xfgen */
     int vm_fd;
     off_t vm_next_page; /* Next probably empty page */
     off_t vm_near_pages; /* Number of pages allocated sequentially */
@@ -422,10 +429,10 @@
     /* An I/O thread process an element taken from the io_jobs queue and
      * put the result of the operation in the io_done list. While the
      * job is being processed, it's put on io_processing queue. */
-    list *io_newjobs; /* List of VM I/O jobs yet to be processed */
-    list *io_processing; /* List of VM I/O jobs being processed */
-    list *io_processed; /* List of VM I/O jobs already processed */
-    list *io_ready_clients; /* Clients ready to be unblocked. All keys loaded */
+  list E_G(iojob *) *io_newjobs; /* List of VM I/O jobs yet to be processed */ /**DSU xfgen */
+  list E_G(iojob *) *io_processing; /* List of VM I/O jobs being processed */ /**DSU xfgen */
+  list E_G(iojob *) *io_processed; /* List of VM I/O jobs already processed */ /**DSU xfgen */
+  list E_G(redisClient *) *io_ready_clients; /* Clients ready to be unblocked. All keys loaded */ /**DSU xfgen */
     pthread_mutex_t io_mutex; /* lock to access io_jobs/io_done/io_thread_job */
     pthread_mutex_t obj_freelist_mutex; /* safe redis objects creation/free */
     pthread_mutex_t io_swapfile_mutex; /* So we can lseek + write */
@@ -444,10 +451,12 @@
     unsigned long long vm_stats_swapouts;
     unsigned long long vm_stats_swapins;
     /* Pubsub */
-    dict *pubsub_channels; /* Map channels to list of subscribed clients */
-    list *pubsub_patterns; /* A list of pubsub_patterns */
+  dict E_G(robj *, [opaque]) *pubsub_channels; //list<redisClient *>E_T(t=t) /**DSU xfgen */
+                              /* Map channels to list of subscribed clients */
+  list E_G(robj *) *pubsub_patterns;  /**DSU xfgen */
+                              /* A list of pubsub_patterns */
     /* Misc */
-    FILE *devnull;
+  FILE * E_OPAQUE devnull; /**DSU xfgen */
 };
 
 typedef struct pubsubPattern {
@@ -9675,7 +9684,7 @@
     sigaddset(&mask,SIGHUP);
     sigaddset(&mask,SIGPIPE);
     pthread_sigmask(SIG_SETMASK, &mask, &omask);
-    while ((err = pthread_create(&thread,&server.io_threads_attr,IOThreadEntryPoint,NULL)) != 0) {
+    while ((err = kitsune_pthread_create(&thread,&server.io_threads_attr,IOThreadEntryPoint,NULL)) != 0) { /**DSU thread */
         redisLog(REDIS_WARNING,"Unable to spawn an I/O thread: %s",
             strerror(err));
         usleep(1000000);
@@ -10821,6 +10830,16 @@
 int main(int argc, char **argv) {
     time_t start;
 
+    MIGRATE_STATIC(server); /**DSU data */
+    MIGRATE_GLOBAL(shared); /**DSU data */
+
+    if (kitsune_is_updating()) { /**DSU other 4 */
+        signal(SIGHUP, SIG_IGN);
+        signal(SIGPIPE, SIG_IGN);
+        setupSigSegvAction();
+    }
+
+    if (!kitsune_is_updating()) { /**DSU control */
     initServerConfig();
     if (argc == 2) {
         if (strcmp(argv[1], "-v") == 0 ||
@@ -10849,6 +10868,7 @@
     }
     redisLog(REDIS_NOTICE,"The server is now ready to accept connections on port %d", server.port);
     aeSetBeforeSleepProc(server.el,beforeSleep);
+    }
     aeMain(server.el);
     aeDeleteEventLoop(server.el);
     return 0;
Only in orig/redis-2.0.0: redisinserthang.rb
Only in orig/redis-2.0.0: redisinsert.rb
Only in redis-2.0.0: redis.xf
Only in orig/redis-2.0.0: results-ek.txt
Only in orig/redis-2.0.0: results-orig.txt
Only in orig/redis-2.0.0: results-reg.txt
Only in orig/redis-2.0.0: results.txt
diff -ur orig/redis-2.0.0/sds.h redis-2.0.0/sds.h
--- orig/redis-2.0.0/sds.h	2011-10-18 14:49:28.000000000 -0400
+++ redis-2.0.0/sds.h	2012-04-12 12:23:01.265316000 -0400
@@ -38,7 +38,7 @@
 struct sdshdr {
     long len;
     long free;
-    char buf[];
+    char buf[E_ARRAY(self.len)];
 };
 
 sds sdsnewlen(const void *init, size_t initlen);
Only in redis-2.0.0/tests: tmp
