diff -u orig/redis-2.0.0/adlist.h redis-2.0.0/adlist.h
--- orig/redis-2.0.0/adlist.h	2011-10-18 14:49:28.000000000 -0400
+++ redis-2.0.0/adlist.h	2011-09-20 15:22:54.000000000 -0400
@@ -33,25 +33,27 @@
 
 /* Node, List, and Iterator are the only data structures used currently. */
 
-typedef struct listNode {
-    struct listNode *prev;
-    struct listNode *next;
-    void *value;
-} listNode;
+struct listNode {
+    struct listNode E_G(@t) *prev;
+    struct listNode E_G(@t) *next;
+    void * E_T(@t) value;
+} E_GENERIC(@t);
+typedef struct listNode E_G(@t) listNode E_GENERIC(@t);
 
 typedef struct listIter {
     listNode *next;
     int direction;
 } listIter;
 
-typedef struct list {
-    listNode *head;
-    listNode *tail;
+struct list {
+    listNode E_G(@t) *head;
+    listNode E_G(@t) *tail;
     void *(*dup)(void *ptr);
     void (*free)(void *ptr);
     int (*match)(void *ptr, void *key);
     unsigned int len;
-} list;
+} E_GENERIC(@t);
+typedef struct list E_G(@t) list E_GENERIC(@t);
 
 /* Functions implemented as macros */
 #define listLength(l) ((l)->len)
diff -u orig/redis-2.0.0/ae.c redis-2.0.0/ae.c
--- orig/redis-2.0.0/ae.c	2011-10-18 14:49:28.000000000 -0400
+++ redis-2.0.0/ae.c	2011-11-10 12:45:51.000000000 -0500
@@ -69,8 +69,12 @@
     }
     /* Events with mask == AE_NONE are not set. So let's initialize the
      * vector with it. */
-    for (i = 0; i < AE_SETSIZE; i++)
+    for (i = 0; i < AE_SETSIZE; i++) {
         eventLoop->events[i].mask = AE_NONE;
+        eventLoop->events[i].clientData = NULL;
+        eventLoop->events[i].rfileProc = NULL;
+        eventLoop->events[i].wfileProc = NULL;       
+    }
     return eventLoop;
 }
 
@@ -107,6 +111,7 @@
 
     if (fe->mask == AE_NONE) return;
     fe->mask = fe->mask & (~mask);
+
     if (fd == eventLoop->maxfd && fe->mask == AE_NONE) {
         /* Update the max fd */
         int j;
@@ -115,7 +120,7 @@
             if (eventLoop->events[j].mask != AE_NONE) break;
         eventLoop->maxfd = j;
     }
-    aeApiDelEvent(eventLoop, fd, mask);
+    aeApiDelEvent(eventLoop, fd, mask); 
 }
 
 static void aeGetTime(long *seconds, long *milliseconds)
@@ -375,6 +380,8 @@
 void aeMain(aeEventLoop *eventLoop) {
     eventLoop->stop = 0;
     while (!eventLoop->stop) {
+        /* EKIDEN: update point */
+        kitsune_update("main_loop");
         if (eventLoop->beforesleep != NULL)
             eventLoop->beforesleep(eventLoop);
         aeProcessEvents(eventLoop, AE_ALL_EVENTS);
diff -u orig/redis-2.0.0/ae.h redis-2.0.0/ae.h
--- orig/redis-2.0.0/ae.h	2011-10-18 14:49:28.000000000 -0400
+++ redis-2.0.0/ae.h	2011-09-20 15:22:54.000000000 -0400
@@ -93,7 +93,7 @@
     aeFiredEvent fired[AE_SETSIZE]; /* Fired events */
     aeTimeEvent *timeEventHead;
     int stop;
-    void *apidata; /* This is used for polling API specific data */
+    void * E_OPAQUE apidata; /* This is used for polling API specific data */
     aeBeforeSleepProc *beforesleep;
 } aeEventLoop;
 
diff -u orig/redis-2.0.0/dict.h redis-2.0.0/dict.h
--- orig/redis-2.0.0/dict.h	2011-10-18 14:49:28.000000000 -0400
+++ redis-2.0.0/dict.h	2011-09-20 15:22:54.000000000 -0400
@@ -42,11 +42,13 @@
 /* Unused arguments generate annoying warnings... */
 #define DICT_NOTUSED(V) ((void) V)
 
-typedef struct dictEntry {
-    void *key;
-    void *val;
-    struct dictEntry *next;
-} dictEntry;
+struct dictEntry {
+    void * E_T(@k) key;
+    void * E_T(@v) val;
+    struct dictEntry E_G(@k, @v) *next;
+} E_GENERIC(@k, @v);
+
+typedef struct dictEntry E_G(@k, @v) dictEntry E_GENERIC(@k, @v);
 
 typedef struct dictType {
     unsigned int (*hashFunction)(const void *key);
@@ -59,20 +61,22 @@
 
 /* This is our hash table structure. Every dictionary has two of this as we
  * implement incremental rehashing, for the old to the new table. */
-typedef struct dictht {
-    dictEntry **table;
+struct dictht {
+    dictEntry E_G(@k, @v) ** E_PTRARRAY(self.size) table;
     unsigned long size;
     unsigned long sizemask;
     unsigned long used;
-} dictht;
+} E_GENERIC(@k, @v);
+typedef struct dictht E_G(@k, @v) dictht E_GENERIC(@k, @v);
 
-typedef struct dict {
+struct dict {
     dictType *type;
-    void *privdata;
-    dictht ht[2];
+    void * E_OPAQUE privdata;
+    dictht E_G(@k, @v) ht[2];
     int rehashidx; /* rehashing not in progress if rehashidx == -1 */
     int iterators; /* number of iterators currently running */
-} dict;
+} E_GENERIC(@k, @v);
+typedef struct dict E_G(@k, @v) dict E_GENERIC(@k, @v);
 
 typedef struct dictIterator {
     dict *d;
diff -u orig/redis-2.0.0/Makefile redis-2.0.0/Makefile
--- orig/redis-2.0.0/Makefile	2011-10-18 14:49:28.000000000 -0400
+++ redis-2.0.0/Makefile	2012-01-13 22:58:40.992578000 -0500
@@ -2,6 +2,22 @@
 # Copyright (C) 2009 Salvatore Sanfilippo <antirez at gmail dot com>
 # This file is released under the BSD license, see the COPYING file
 
+LASTVERSION=2.0.0
+VERSION=2.0.0
+
+# EKIDEN
+EKINC  = -I../../../bin/
+EKLIB  = ../../../bin/libkitsune-threads.a
+CFLAGS_SHARED  = -Wall -ldl -shared -fPIC -u kitsune_init_inplace
+CFLAGS = -O2 -Wall -ldl -fPIC $(EKINC) $(EKLIB)
+EKDRV = ../../../bin/driver
+EKCC = ../../../tools/bin/ktcc --doglobalreg --dostackvars --keepunused -include fmacros.h -include kitsune.h
+EKJOIN = ../../../tools/bin/kttjoin
+EKGEN = ../../../tools/bin/xfgen
+
+USER_XFORM=redis.xf
+GENERATED_XFORM=dsu.c
+
 release_hdr := $(shell sh -c './mkreleasehdr.sh')
 uname_S := $(shell sh -c 'uname -s 2>/dev/null || echo not')
 OPTIMIZATION?=-O2
@@ -21,13 +37,13 @@
 CHECKDUMPOBJ = redis-check-dump.o lzf_c.o lzf_d.o
 CHECKAOFOBJ = redis-check-aof.o
 
-PRGNAME = redis-server
+RUNLIBNAME = redis-server.so
 BENCHPRGNAME = redis-benchmark
 CLIPRGNAME = redis-cli
 CHECKDUMPPRGNAME = redis-check-dump
 CHECKAOFPRGNAME = redis-check-aof
 
-all: redis-server redis-benchmark redis-cli redis-check-dump redis-check-aof
+all: redis-server #redis-benchmark redis-cli redis-check-dump redis-check-aof
 
 # Deps (use make dep to generate this)
 adlist.o: adlist.c adlist.h zmalloc.h
@@ -55,31 +71,33 @@
 zipmap.o: zipmap.c zmalloc.h
 zmalloc.o: zmalloc.c config.h
 
-redis-server: $(OBJ)
-	$(CC) -o $(PRGNAME) $(CCOPT) $(DEBUG) $(OBJ) $(CCLINK)
-	@echo ""
-	@echo "Hint: To run the test-redis.tcl script is a good idea."
-	@echo "Launch the redis server with ./redis-server, then in another"
-	@echo "terminal window enter this directory and run 'make test'."
-	@echo ""
-
-redis-benchmark: $(BENCHOBJ)
-	$(CC) -o $(BENCHPRGNAME) $(CCOPT) $(DEBUG) $(BENCHOBJ)
+redis-server: $(OBJ) $(GENERATED_XFORM)
+	$(CC)  -o $(RUNLIBNAME) $(CFLAGS_SHARED) $(DEBUG) $(OBJ) $(GENERATED_XFORM) $(EKINC) $(EKLIB) $(CCLINK)
+	cp redis-server.so redis-server2.so
+
+# redis-benchmark: $(BENCHOBJ)
+# 	$(CC) -o $(BENCHPRGNAME) $(CCOPT) $(DEBUG) $(BENCHOBJ)
+
+# redis-cli: $(CLIOBJ)
+# 	$(CC) -o $(CLIPRGNAME) $(CCOPT) $(DEBUG) $(CLIOBJ)
+
+# redis-check-dump: $(CHECKDUMPOBJ)
+# 	$(CC) -o $(CHECKDUMPPRGNAME) $(CCOPT) $(DEBUG) $(CHECKDUMPOBJ)
 
-redis-cli: $(CLIOBJ)
-	$(CC) -o $(CLIPRGNAME) $(CCOPT) $(DEBUG) $(CLIOBJ)
+# redis-check-aof: $(CHECKAOFOBJ)
+# 	$(CC) -o $(CHECKAOFPRGNAME) $(CCOPT) $(DEBUG) $(CHECKAOFOBJ)
 
-redis-check-dump: $(CHECKDUMPOBJ)
-	$(CC) -o $(CHECKDUMPPRGNAME) $(CCOPT) $(DEBUG) $(CHECKDUMPOBJ)
+redis-$(VERSION).ktt: $(OBJ)
+	$(EKJOIN) $@ $(patsubst %.o,%.ktt,$(OBJ))
 
-redis-check-aof: $(CHECKAOFOBJ)
-	$(CC) -o $(CHECKAOFPRGNAME) $(CCOPT) $(DEBUG) $(CHECKAOFOBJ)
+$(GENERATED_XFORM): redis-$(VERSION).ktt $(USER_XFORM)
+	$(EKGEN) $@ ../redis-$(LASTVERSION)/redis-$(LASTVERSION).ktt redis-$(VERSION).ktt $(USER_XFORM)
 
 .c.o:
-	$(CC) -c $(CFLAGS) $(DEBUG) $(COMPILE_TIME) $<
+	$(EKCC) -c $(CFLAGS) -fvisibility=hidden $(DEBUG) $(COMPILE_TIME) $< --doktsavetypes --typesfile-out=$*.ktt
 
 clean:
-	rm -rf $(PRGNAME) $(BENCHPRGNAME) $(CLIPRGNAME) $(CHECKDUMPPRGNAME) $(CHECKAOFPRGNAME) *.o *.gcda *.gcno *.gcov
+	rm -rf $(RUNLIBNAME) $(BENCHPRGNAME) $(CLIPRGNAME) $(CHECKDUMPPRGNAME) $(CHECKAOFPRGNAME) *.o *.cil.c *.i *.gcda *.gcno *.gcov *.ktt $(GENERATED_XFORM)
 
 dep:
 	$(CC) -MM *.c
diff -u orig/redis-2.0.0/redis.c redis-2.0.0/redis.c
--- orig/redis-2.0.0/redis.c	2011-10-18 14:49:28.000000000 -0400
+++ redis-2.0.0/redis.c	2012-01-13 22:58:40.992578000 -0500
@@ -61,6 +61,9 @@
 #include <math.h>
 #include <pthread.h>
 
+/* kitsune change */
+#include <ktthreads.h>
+
 #if defined(__sun)
 #include "solarisfixes.h"
 #endif
@@ -129,7 +132,7 @@
 #define REDIS_ENCODING_ZIPMAP 2 /* Encoded as zipmap */
 #define REDIS_ENCODING_HT 3     /* Encoded as an hash table */
 
-static char* strencoding[] = {
+static char* strencoding[] E_MANUAL_MIGRATE = {
     "raw", "int", "zipmap", "hashtable"
 };
 
@@ -255,7 +258,7 @@
 
 /* The actual Redis Object */
 typedef struct redisObject {
-    void *ptr;
+    void * E_OPAQUE ptr;
     unsigned char type;
     unsigned char encoding;
     unsigned char storage;  /* If this object is a key, where is the value?
@@ -283,22 +286,26 @@
 } while(0);
 
 typedef struct redisDb {
-    dict *dict;                 /* The keyspace for this DB */
-    dict *expires;              /* Timeout of keys with a timeout set */
-    dict *blockingkeys;         /* Keys with clients waiting for data (BLPOP) */
-    dict *io_keys;              /* Keys with clients waiting for VM I/O */
+    dict E_G(robj*,robj*) *dict;           /* The keyspace for this DB */
+    /* 
+       The value stored for expired is a time_t casted to a void pointer.
+       We use [opaque] to be sure that it is transferred correctly.
+     */
+    dict E_G(robj*,[opaque]) *expires;              /* Timeout of keys with a timeout set */
+    dict E_G(robj*,list<redisClient*>*) *blockingkeys;         /* Keys with clients waiting for data (BLPOP) */
+    dict E_G(robj*,list<redisClient*>*) *io_keys;              /* Keys with clients waiting for VM I/O */
     int id;
 } redisDb;
 
 /* Client MULTI/EXEC state */
 typedef struct multiCmd {
-    robj **argv;
+    robj ** E_PTRARRAY(self.argc) argv;
     int argc;
     struct redisCommand *cmd;
 } multiCmd;
 
 typedef struct multiState {
-    multiCmd *commands;     /* Array of MULTI commands */
+    multiCmd * E_PTRARRAY(self.count) commands;     /* Array of MULTI commands */
     int count;              /* Total number of MULTI commands */
 } multiState;
 
@@ -309,11 +316,11 @@
     redisDb *db;
     int dictid;
     sds querybuf;
-    robj **argv, **mbargv;
+    robj ** E_PTRARRAY(self.argc) argv, ** E_PTRARRAY(self.mbargc) mbargv;
     int argc, mbargc;
     int bulklen;            /* bulk read len. -1 if not in bulk read mode */
     int multibulk;          /* multi bulk command format active */
-    list *reply;
+    list E_G(robj *) *reply;
     int sentlen;
     time_t lastinteraction; /* time of the last interaction, used for timeout */
     int flags;              /* REDIS_SLAVE | REDIS_MONITOR | REDIS_MULTI ... */
@@ -324,15 +331,17 @@
     long repldboff;         /* replication DB file offset */
     off_t repldbsize;       /* replication DB file size */
     multiState mstate;      /* MULTI/EXEC state */
-    robj **blockingkeys;    /* The key we are waiting to terminate a blocking
+    robj ** E_PTRARRAY(self.blockingkeysnum) blockingkeys;    /* The key we are waiting to terminate a blocking
                              * operation such as BLPOP. Otherwise NULL. */
     int blockingkeysnum;    /* Number of blocking keys */
     time_t blockingto;      /* Blocking operation timeout. If UNIX current time
                              * is >= blockingto then the operation timed out. */
-    list *io_keys;          /* Keys this client is waiting to be loaded from the
+    list E_G(robj *) *io_keys;          /* Keys this client is waiting to be loaded from the
                              * swap file in order to continue. */
-    dict *pubsub_channels;  /* channels a client is interested in (SUBSCRIBE) */
-    list *pubsub_patterns;  /* patterns a client is interested in (SUBSCRIBE) */
+    dict E_G(robj *, [opaque]) *pubsub_channels;
+                            /* channels a client is interested in (SUBSCRIBE) */
+    list E_G(robj *) *pubsub_patterns;  
+                            /* patterns a client is interested in (SUBSCRIBE) */
 } redisClient;
 
 struct saveparam {
@@ -345,15 +354,16 @@
     pthread_t mainthread;
     int port;
     int fd;
-    redisDb *db;
+    redisDb * E_PTRARRAY(self.dbnum) db;
     long long dirty;            /* changes to DB from the last save */
     long long dirty_before_bgsave; /* used to restore dirty on failed BGSAVE */
-    list *clients;
-    list *slaves, *monitors;
+    list E_G(redisClient *) *clients;
+    list E_G(redisClient *) *slaves; 
+    list E_G(redisClient *) *monitors;
     char neterr[ANET_ERR_LEN];
     aeEventLoop *el;
     int cronloops;              /* number of times the cron function run */
-    list *objfreelist;          /* A list of freed objects to avoid malloc() */
+    list E_G(robj *) *objfreelist;          /* A list of freed objects to avoid malloc() */
     time_t lastsave;            /* Unix time of last save succeeede */
     /* Fields used only for stats */
     time_t stat_starttime;         /* server start time */
@@ -372,24 +382,24 @@
     time_t lastfsync;
     int appendfd;
     int appendseldb;
-    char *pidfile;
+    char * E_SZ pidfile;
     pid_t bgsavechildpid;
     pid_t bgrewritechildpid;
     sds bgrewritebuf; /* buffer taken by parent during oppend only rewrite */
     sds aofbuf;       /* AOF buffer, written before entering the event loop */
     struct saveparam *saveparams;
     int saveparamslen;
-    char *logfile;
-    char *bindaddr;
-    char *dbfilename;
-    char *appendfilename;
-    char *requirepass;
+    char * E_SZ logfile;
+    char * E_SZ bindaddr;
+    char * E_SZ dbfilename;
+    char * E_SZ appendfilename;
+    char * E_SZ requirepass;
     int rdbcompression;
     int activerehashing;
     /* Replication related */
     int isslave;
-    char *masterauth;
-    char *masterhost;
+    char * E_SZ masterauth;
+    char * E_SZ masterhost;
     int masterport;
     redisClient *master;    /* client that is master for this slave */
     int replstate;
@@ -404,7 +414,7 @@
     int sort_bypattern;
     /* Virtual memory configuration */
     int vm_enabled;
-    char *vm_swap_file;
+    char * E_SZ vm_swap_file;
     off_t vm_page_size;
     off_t vm_pages;
     unsigned long long vm_max_memory;
@@ -412,20 +422,21 @@
     size_t hash_max_zipmap_entries;
     size_t hash_max_zipmap_value;
     /* Virtual memory state */
-    FILE *vm_fp;
+    FILE * E_OPAQUE vm_fp;
     int vm_fd;
     off_t vm_next_page; /* Next probably empty page */
     off_t vm_near_pages; /* Number of pages allocated sequentially */
-    unsigned char *vm_bitmap; /* Bitmap of free/used pages */
+    // TODO: this is an array - but changes should be handled manually
+    unsigned char * E_OPAQUE vm_bitmap; /* Bitmap of free/used pages */
     time_t unixtime;    /* Unix time sampled every second. */
     /* Virtual memory I/O threads stuff */
     /* An I/O thread process an element taken from the io_jobs queue and
      * put the result of the operation in the io_done list. While the
      * job is being processed, it's put on io_processing queue. */
-    list *io_newjobs; /* List of VM I/O jobs yet to be processed */
-    list *io_processing; /* List of VM I/O jobs being processed */
-    list *io_processed; /* List of VM I/O jobs already processed */
-    list *io_ready_clients; /* Clients ready to be unblocked. All keys loaded */
+    list E_G(iojob *) *io_newjobs; /* List of VM I/O jobs yet to be processed */
+    list E_G(iojob *) *io_processing; /* List of VM I/O jobs being processed */
+    list E_G(iojob *) *io_processed; /* List of VM I/O jobs already processed */
+    list E_G(redisClient *) *io_ready_clients; /* Clients ready to be unblocked. All keys loaded */
     pthread_mutex_t io_mutex; /* lock to access io_jobs/io_done/io_thread_job */
     pthread_mutex_t obj_freelist_mutex; /* safe redis objects creation/free */
     pthread_mutex_t io_swapfile_mutex; /* So we can lseek + write */
@@ -444,10 +455,12 @@
     unsigned long long vm_stats_swapouts;
     unsigned long long vm_stats_swapins;
     /* Pubsub */
-    dict *pubsub_channels; /* Map channels to list of subscribed clients */
-    list *pubsub_patterns; /* A list of pubsub_patterns */
+    dict E_G(robj *, [opaque]) *pubsub_channels; //list<redisClient *>E_T(t=t)
+                              /* Map channels to list of subscribed clients */
+    list E_G(robj *) *pubsub_patterns; 
+                              /* A list of pubsub_patterns */
     /* Misc */
-    FILE *devnull;
+    FILE * E_OPAQUE devnull;
 };
 
 typedef struct pubsubPattern {
@@ -1172,7 +1185,7 @@
 }
 
 /* Sets type and expires */
-static dictType setDictType = {
+static dictType setDictType E_MANUAL_MIGRATE = {
     dictEncObjHash,            /* hash function */
     NULL,                      /* key dup */
     NULL,                      /* val dup */
@@ -1182,7 +1195,7 @@
 };
 
 /* Sorted sets hash (note: a skiplist is used in addition to the hash table) */
-static dictType zsetDictType = {
+static dictType zsetDictType E_MANUAL_MIGRATE = {
     dictEncObjHash,            /* hash function */
     NULL,                      /* key dup */
     NULL,                      /* val dup */
@@ -1192,7 +1205,7 @@
 };
 
 /* Db->dict */
-static dictType dbDictType = {
+static dictType dbDictType E_MANUAL_MIGRATE = {
     dictObjHash,                /* hash function */
     NULL,                       /* key dup */
     NULL,                       /* val dup */
@@ -1202,7 +1215,7 @@
 };
 
 /* Db->expires */
-static dictType keyptrDictType = {
+static dictType keyptrDictType E_MANUAL_MIGRATE = {
     dictObjHash,               /* hash function */
     NULL,                      /* key dup */
     NULL,                      /* val dup */
@@ -1212,7 +1225,7 @@
 };
 
 /* Hash type hash table (note that small hashes are represented with zimpaps) */
-static dictType hashDictType = {
+static dictType hashDictType E_MANUAL_MIGRATE = {
     dictEncObjHash,             /* hash function */
     NULL,                       /* key dup */
     NULL,                       /* val dup */
@@ -1224,7 +1237,7 @@
 /* Keylist hash table type has unencoded redis objects as keys and
  * lists as values. It's used for blocking operations (BLPOP) and to
  * map swapped keys to a list of clients waiting for this keys to be loaded. */
-static dictType keylistDictType = {
+static dictType keylistDictType E_MANUAL_MIGRATE = {
     dictObjHash,                /* hash function */
     NULL,                       /* key dup */
     NULL,                       /* val dup */
@@ -9616,7 +9629,9 @@
     listNode *ln;
     REDIS_NOTUSED(arg);
 
+
     pthread_detach(pthread_self());
+
     while(1) {
         /* Get a new job to process */
         lockThreadedIO();
@@ -9675,7 +9690,7 @@
     sigaddset(&mask,SIGHUP);
     sigaddset(&mask,SIGPIPE);
     pthread_sigmask(SIG_SETMASK, &mask, &omask);
-    while ((err = pthread_create(&thread,&server.io_threads_attr,IOThreadEntryPoint,NULL)) != 0) {
+    while ((err = kitsune_pthread_create(&thread,&server.io_threads_attr,IOThreadEntryPoint,NULL)) != 0) {
         redisLog(REDIS_WARNING,"Unable to spawn an I/O thread: %s",
             strerror(err));
         usleep(1000000);
@@ -10821,6 +10836,18 @@
 int main(int argc, char **argv) {
     time_t start;
 
+    /*kitsune_do_automigrate();*/
+
+    MIGRATE_STATIC(server);
+    MIGRATE_GLOBAL(shared);
+
+    if (kitsune_is_updating()) {
+        signal(SIGHUP, SIG_IGN);
+        signal(SIGPIPE, SIG_IGN);
+        setupSigSegvAction();
+    }
+
+    if (!kitsune_is_updating()) {
     initServerConfig();
     if (argc == 2) {
         if (strcmp(argv[1], "-v") == 0 ||
@@ -10849,6 +10876,7 @@
     }
     redisLog(REDIS_NOTICE,"The server is now ready to accept connections on port %d", server.port);
     aeSetBeforeSleepProc(server.el,beforeSleep);
+    }
     aeMain(server.el);
     aeDeleteEventLoop(server.el);
     return 0;
diff -u orig/redis-2.0.0/sds.h redis-2.0.0/sds.h
--- orig/redis-2.0.0/sds.h	2011-10-18 14:49:28.000000000 -0400
+++ redis-2.0.0/sds.h	2011-09-20 15:22:54.000000000 -0400
@@ -33,12 +33,12 @@
 
 #include <sys/types.h>
 
-typedef char *sds;
+typedef char * E_OPAQUE sds;
 
 struct sdshdr {
     long len;
     long free;
-    char buf[];
+    char buf[E_ARRAY(self.len)];
 };
 
 sds sdsnewlen(const void *init, size_t initlen);
